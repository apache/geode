/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
  compile('org.springframework.shell:spring-shell:' + project.'spring-shell.version')
  {
    exclude module: 'aopalliance'
    exclude module: 'asm'
    exclude module: 'cglib'
    exclude module: 'guava'
    exclude module: 'spring-aop'
    exclude module: 'spring-context-support'
    ext.optional = true
  }

  compile('org.apache.lucene:lucene-core:' + project.'lucene.version')
  compile('org.apache.commons:commons-lang3:' + project.'commons-lang3.version')
  compile('mx4j:mx4j:' + project.'mx4j.version')
  compile('org.apache.logging.log4j:log4j-api:' + project.'log4j.version')
  testCompile('com.pholser:junit-quickcheck-core:' + project.'junit-quickcheck.version')

  distributedTestCompile('org.hamcrest:hamcrest-core:' + project.'hamcrest-all.version')
  distributedTestCompile('org.hamcrest:hamcrest-library:' + project.'hamcrest-all.version')

  testCompile('com.carrotsearch.randomizedtesting:randomizedtesting-runner:' + project.'carrotsearch.version')
  testCompile('org.powermock:powermock-core:' + project.'powermock.version')
  testCompile('org.powermock:powermock-module-junit4:' + project.'powermock.version')
  testCompile('org.powermock:powermock-api-mockito2:' + project.'powermock.version')

  upgradeTestCompile('commons-io:commons-io:' + project.'commons-io.version')

  testCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  compile(project(':geode-core'))
  compile(project(':geode-common'))
  compile('org.apache.lucene:lucene-analyzers-common:' + project.'lucene.version')
  compile('org.apache.lucene:lucene-queryparser:' + project.'lucene.version') {
    exclude module: 'lucene-sandbox'
  }

  distributedTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  runtimeOnly('org.apache.lucene:lucene-analyzers-phonetic:' + project.'lucene.version')

  testCompile(project(':geode-lucene:geode-lucene-test'))
  testCompile('org.apache.lucene:lucene-test-framework:' + project.'lucene.version')
  testCompile('com.pholser:junit-quickcheck-generators:' + project.'junit-quickcheck.version')

  testCompile('pl.pragmatists:JUnitParams:' + project.'JUnitParams.version')


  integrationTestCompile(project(':geode-dunit')) {
    exclude module: 'geode-core'
  }
  integrationTestCompile(project(':geode-lucene:geode-lucene-test'))
  integrationTestCompile('org.apache.lucene:lucene-analyzers-phonetic:' + project.'lucene.version')
  integrationTestCompile('pl.pragmatists:JUnitParams:' + project.'JUnitParams.version')


  distributedTestCompile(project(':geode-lucene:geode-lucene-test'))
  distributedTestCompile('pl.pragmatists:JUnitParams:' + project.'JUnitParams.version')
  distributedTestCompile(project(':geode-dunit')){
    exclude module: 'geode-core'
  }


  upgradeTestCompile(project(':geode-dunit')) {
    exclude module: 'geode-core'
  }


  performanceTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  performanceTestCompile(project(':geode-lucene:geode-lucene-test'))
}

//The lucene integration tests don't have any issues that requiring forking
integrationTest.forkEvery 0
