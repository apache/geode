<% set_title("Redis API for", product_name) %>

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

The Redis API for <%=vars.product_name%> allows a single <%=vars.product_name%> cluster to function as a drop-in replacement for a
highly-available Redis data store with one database, letting Redis applications take advantage of
<%=vars.product_name%>’s scaling capabilities without changing their client code. Redis clients connect to a <%=vars.product_name%>
server in the same way they connect to a Redis server, using a hostname and a port number, with
optional password authentication.

<img src="../images/redis_api_for_geode.png" class="image" />

## <a id="using-the-redis-api-for-<%=vars.product_name_lowercase%>" class="no-quick-link"></a>Using the Redis API for <%=vars.product_name%>

The <%=vars.product_name%> cluster must have at least one server that is set up to handle the incoming Redis
commands.

Use gfsh to start at least one server with a command of the form:

``` pre
start server --name=<serverName> --locators=<locatorPort> --redis-port=<redisPort> --redis-bind-address=<redisBindAddress>
```

Replace `<serverName>` with the name of your server.

Replace `<locatorPort>` with your locator port.

Replace `<redisPort>` to specify the port the <%=vars.product_name%> server will listen on for Redis commands (the typical default Redis port is 6379).

Replace `<redisBindAddress>` with the IP address of the server host. If this option is not specified, the default is determined from the `/etc/hosts` file.

To confirm the server is listening, run:

``` pre
redis-cli -h <redisBindAddress> -p <redisPort> ping
```

Replace `<redisBindAddress>` and `<redisPort>` with the same values as the server.

If the server is functioning properly, you should see a response of `PONG`.

## <a id="included-redis-commands" class="no-quick-link"></a>Included Redis Commands

The Redis API for <%=vars.product_name%> currently supports the following commands.  See [Redis commands](https://redis.io/commands/) for a complete list of and more information on Redis commands.

-   **Strings**: APPEND, GET, GETRANGE, SET
-   **Hashes**: HGETALL, HMSET, HSET
-   **Sets**: SADD, SMEMBERS, SREM
-   **Publish/Subscribe**: PUBLISH, PSUBSCRIBE, PUNSUBSCRIBE, SUBSCRIBE, UNSUBSCRIBE
-   **Keys**: DEL, EXISTS, EXPIRE, PERSIST, PEXPIRE, PEXPIREAT, RENAME

The following Redis API for <%=vars.product_name%> commands are **experimental**:

-   **Strings**: BITCOUNT, BITOP, BITPOS, DECR, DECRBY, GETBIT, GETSET, INCR, INCRBY, INCRBYFLOAT, MGET,
  MSET, MSETNX, PSETEX, SETBIT, SETEX, SETNX, STRLEN
-   **Lists**: LINDEX, LLEN, LPOP, LPUSH, LPUSHX, LRANGE, LREM, LSET, LTRIM, RPOP, RPUSH, RPUSHX
-   **Hashes**: HDEL, HEXISTS, HGET, HINCRBY, HINCRBYFLOAT, HKEYS, HMGET, HSETNX, HLEN, HSCAN, HVALS
-   **Sets**: SCARD, SDIFF, SDIFFSTORE, SINTER, SINTERSTORE, SISMEMBER, SMOVE, SPOP, SRANDMEMBER,
  SSCAN, SUNION, SUNIONSTORE
-   **SortedSets**: ZADD, ZCARD, ZCOUNT, ZINCRBY, ZLEXCOUNT, ZRANGE, ZRANGEBYLEX, ZRANGEBYSCORE,
  ZRANK, ZREM, ZREMRANGEBYLEX, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZREVRANGE, ZREVRANGEBYSCORE,
  ZREVRANK, ZSCAN, ZSCORE
-   **HyperLogLog**: PFADD, PFCOUNT, PFMERGE
-   **Keys**: DBSIZE, EXPIREAT, FLUSHDB, FLUSHALL, KEYS, PTTL, SCAN, TTL
-   **Transactions**: DISCARD, EXEC, MULTI
-   **Server**: AUTH, ECHO, PING, QUIT

## <a id="advantages-of-<%=vars.product_name_lowercase%>-over-redis" class="no-quick-link"></a>Advantages of <%=vars.product_name%> over Redis

<%=vars.product_name%>’s primary advantage is its **scalability**. While the Redis server is single threaded, <%=vars.product_name%> supports high concurrency. Many Redis clients can execute commands on the <%=vars.product_name%> cluster simultaneously.

<%=vars.product_name%>'s architecture and management features help detect and resolve **network partitioning** problems without explicit management on the part of the Redis client.