<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<% set_title(product_name, "for Redis") %>

<%=vars.product_name%> for Redis allows <%=vars.product_name%> to function as a
highly-available Redis data store, letting Redis applications take advantage of
<%=vars.product_name%>’s scaling capabilities with minimal changes to their client code.


## <a id="using-geode-for-redis"></a>Using <%=vars.product_name%> for Redis
To use the <%=vars.product_name%> for Redis feature, the cluster must have at least one server that has enabled the feature to handle incoming Redis commands.

Prerequisites:

1. **Install <%=vars.product_name%>** <br/>
Using the instructions in the `README.md` file in the root of the <%=vars.product_name%> checkout directory, build and install <%=vars.product_name%>.
2. **A Redis Client to Connect to the Cluster** <br/>
Users will need a Redis client, that supports **Redis cluster commands** to connect to the cluster.  This example uses the Redis CLI which can be
installed following the instructions at https://redis.io/download

### <a id="starting-a-geode-for-redis-cluster"></a>Starting a <%=vars.product_name%> for Redis cluster
Use `gfsh` to start a locator for managing a <%=vars.product_name%> cluster:

```commandLine
gfsh> start locator
```

Use `gfsh` to start at least one server with a command of the form:

```commandLine
gfsh> start server --J=-Dgemfire.geode-for-redis-enabled=true --J=-Dgemfire.geode-for-redis-port=6379
```

More information about the options when starting a server is given in the section [Start Server Options](#redis-start-server-options) below.

To confirm the server is listening, in a separate terminal run:

```commandLine
$ redis-cli -c ping
```

The `-c` option enables cluster mode in the redis-cli, which is necessary since
<%=vars.product_name%> for Redis runs as a Redis Cluster.

If the server is functioning properly, you should see a response of `PONG`.

### <a id="adding-a-server"></a> Add an additional server
If you’re interested in testing <%=vars.product_name%> scalability, in gfsh run the `start server` command again.

However, there are two ports that must be unique for each server in the cluster, the
`gemfire.geode-for-redis-port`, used for receiving Redis commands, and the
`server-port`, which is used for cluster communication.

The first server used `6379` for the redis port; we'll use `6380` for the second server.

The first server was started without a server port specified, so it used the default `40404`. To start up an additional server, you need to specify
a different server port, or use `--server-port=0` which tells <%=vars.product_name%> to use
an arbitrary available port for the server port.

For example:

```commandLine
gfsh> start server --J=-Dgemfire.geode-for-redis-enabled=true --J=-Dgemfire.geode-for-redis-port=6380 --server-port=0
```


## <a id="redis-start-server-options"></a>Start Server Options

The server options specific to the <%=vars.product_name%> for Redis feature are listed below.
For other server options see [start server](gfsh/command-pages/start.html#topic_3764EE2DB18B4AE4A625E0354471738A).

- `--J=-Dgemfire.geode-for-redis-enabled` - **Default: `false`**<br>
When set to `true`, a <%=vars.product_name%> server with <%=vars.product_name%> for Redis will be started.

- `--J=-Dgemfire.geode-for-redis-port` - **Default: `6379`**<br>
Specifies the port on which the <%=vars.product_name%> server
listens for Redis commands. Note that the default port `6379` is the same port that native Redis
uses by default.

- `--J=-Dgemfire.geode-for-redis-bind-address` - **Default: `""`**<br>
Specifies the host address on which <%=vars.product_name%> for Redis is listening. If set to the
empty string or if not specified, the server listens on all local addresses.

- `--J=-Dgemfire.geode-for-redis-username` - **Default: `"default"`**<br>
Specifies the default username that the server uses when a client attempts to authenticate using
only a password. See section on [Security](#security) for more information.

- `--J=-Dgemfire.geode-for-redis-redundant-copies` - **Default: `1`** <br>
Specifies the number of redundant copies <%=vars.product_name%> for Redis will attempt to keep in
the cluster. A value of 0 means no extra copies of data will be stored in the cluster.
Note that extra servers need to be running for redundant copies to be made. For
example if the cluster only has one server then no redundant copies will exist no matter what the
value of this property is. Also note that <%=vars.product_name%> for Redis uses a <%=vars.product_name%> partitioned region
to implement redundant copies and this property corresponds to the partitioned region's
"redundant-copies" attribute. This property must be set the same on every server in the cluster that is running a
<%=vars.product_name%> for Redis server.

## <a id="security"></a>Security

Security is implemented slightly differently to Open Source Redis. Redis stores password information in plain text in the redis.conf file.

When using <%=vars.product_name%>, to enable security, a Security Manager needs to be configured on the server(s) or _all_ `AUTH` requests will fail.

This Security Manager will authenticate the `AUTH <password>` command and the `AUTH <username> <password>` command.
Similar to Open Source Redis, when users send the `AUTH <password>` command without a username, the system will use the default username `default`.

Users can change this to a custom default username using the `geode-for-redis-username` parameter.
The custom username will then be used when the `AUTH <password>` command is sent without a `<username>`.



For more information about configuring a Security Manager for authentication, see [Implementing Authentication](../managing/security/implementing_authentication.html).

In addition to authentication, each command is authorized according to <%=vars.product_name%>'s
[security model](../managing/security/implementing_authorization.html).
Commands are divided into Read operations and Write operations for which the resource permissions
DATA:READ and DATA:WRITE are respectively required.

To restrict users to _only_  be able to interact with the <%=vars.product_name%> for Redis region,
they must set the resource permissions to DATA:READ:GEODE_FOR_REDIS and DATA:WRITE:GEODE_FOR_REDIS.
This specificity will restrict users to only be able to READ and/or WRITE data to the `GEODE_FOR_REDIS` region.

For information on configuring the cluster for SSL, see [Configuring SSL](../managing/security/implementing_ssl.html).

## <a id="application-development"></a>Application Development

### <a id="thingstoknowbeforyoubegin"></a>Things to know before you begin
- Applications must be using a Redis client that **supports Redis Cluster mode**.
- <%=vars.product_name%> for Redis currently implements a [subset of the full set of Redis commands](#redis-commands)
- If your application is using **Spring Session Data Redis** you will need to add the following code to disable Spring Session from calling CONFIG (CONFIG is not supported).

    ```java
    @Bean
    public static ConfigureRedisAction configureRedisAction() {
          return ConfigureRedisAction.NO_OP;
    }
    ```
    This is a known solution for many Managed Redis products (ElastiCache, Azure Cache for Redis, etc.) that disable the CONFIG command for security reasons.
    You can read more about why this is done in the [Spring Session issue report](https://github.com/spring-projects/spring-session/issues/124).

- If your application is using **redis-py-cluster** you will need to specificy the option **"skip_full_coverage_check=True"** when creating the connection to the cluster.
  This is a known solution for many Managed Redis products (ElastiCache, Azure Cache for Redis, etc) that disable the CONFIG command for security reasons.
  You can read more about why this is done [here](https://github.com/Grokzen/redis-py-cluster/issues/189).

### <a id="shutting-down"></a>Shutting Down
To shut down the <%=vars.product_name%> cluster you started, in the terminal with gfsh running type the following command

> **This command shuts down the entire <%=vars.product_name%> cluster.**

```commandLine
gfsh> shutdown --include-locators=true
```

To confirm that everything shut down correctly, if you execute a Redis command in the `redis-cli` you should see the following message:

```commandline
Could not connect to Redis at 127.0.0.1:6379: Connection refused
```

## <a id="redis-commands"></a>Redis Commands

<%=vars.product_name%> for Redis supports the following Redis commands.

|   Supported Commands ||||
|-----|-----|-----|-----|
| APPEND | AUTH | CLIENT | CLUSTER **[1]** |
| COMMAND **[2]** | DECR | DECRBY | DEL |
| DUMP | ECHO | EXISTS | EXPIRE |
| EXPIREAT | GET | GETRANGE | GETSET |
| HDEL | HEXISTS | HGET | HGETALL |
| HINCRBY | HINCRBYFLOAT | HKEYS | HLEN |
| HMGET | HMSET | HSCAN **[3]** | HSET |
| HSETNX | HSTRLEN | HVALS | INCR |
| INCRBY | INCRBYFLOAT | INFO **[4]** | KEYS |
| LINDEX | LLEN | LOLWUT | LPOP |
| LPUSH | LPUSHX | MGET | MSET |
| MSETNX | PERSIST | PEXPIRE | PEXPIREAT |
| PING | PSETEX | PSUBSCRIBE | PTTL |
| PUBLISH PUBSUB | PUNSUBSCRIBE | RENAME |
| RENAMENX | RESTORE | SADD | SCARD |
| SDIFF | SDIFFSTORE | SET | SETEX |
| SETNX | SETRANGE | SINTER | SINTERSTORE |
| SISMEMBER | SMEMBERS | SMOVE | SPOP |
| SRANDMEMBER | SREM | SSCAN **[3]** | STRLEN |
| SUBSCRIBE | SUNION | SUNIONSTORE | TTL |
| TYPE | UNSUBSCRIBE | QUIT | ZADD |
| ZCARD | ZCOUNT | ZINCRBY | ZINTERSTORE |
| ZLEXCOUNT | ZPOPMAX | ZPOPMIN | ZRANGE |
| ZRANGEBYLEX | ZRANGEBYSCORE | ZRANK | ZREM |
| ZREMRANGEBYLEX | ZREMRANGEBYRANK | ZREMRANGEBYSCORE | ZREVRANGE |
| ZREVRANGEBYLEX | ZREVRANGEBYSCORE | ZREVRANK | ZSCAN **[3]** |
| ZSCORE | ZUNIONSTORE ||||


Commands not listed above are **not implemented**.

**NOTES:**

These commands are supported for Redis 5.

**[1]** CLUSTER is implemented for the subcommands INFO, NODES, SLOTS, and KEYSLOT.

**[2]** COMMAND is implemented only with no subcommands.

**[3]** HSCAN, SSCAN, ZSCAN. Native Redis supports a range of values of +/- the capacity of unsigned 64-bit integers
(+/-&nbsp;1.8446744e+19) for the CURSOR, but 64-bit signed integers for COUNT. <%=vars.product_name%> for Redis matches
native Redis's behavior for COUNT, but only supports values of +/- the capacity of a signed 64-bit
integer (+/-&nbsp;9223372036854775807) for CURSOR.

**[4]** INFO is implemented for the sections and fields listed below:

| INFO section | Field(s) |
|--------------|----------|
| clients      | connected_clients<br/>blocked_clients (always returns 0) |
| cluster      | cluster_enabled (always returns 1) |
| keyspace     | db0:keys<br/>expires (always returns 0)<br/>avg_ttl (always returns 0)<br/> |
| memory       | maxmemory<br/>used_memory<br/>mem_fragmentation_ratio |
| persistence  | loading (always returns 0)<br/>rdb_changes_since_last_save (always returns 0)<br/>rdb_last_save_time (always returns 0) |
| replication  | role (always returns "master")<br/>connected_slaves (always returns 0) |
| server       | redis_version<br/>redis_mode (always returns "cluster" because <%=vars.product_name%> for Redis always runs in cluster mode.)<br/>tcp_port<br/>uptime_in_seconds<br/>uptime_in_days |
| stats        | total_commands_processed<br/>instantaneous_ops_per_sec<br/>total_net_input_bytes<br/>instantaneous_input_kbps<br/>total_connections_received<br/>keyspace_hits<br/>keyspace_misses<br/>evicted_keys (always returns 0)<br/>rejected_connections (always returns 0)<br/>pubsub_channels<br/>pubsub_patterns|

## <a id="expiration-accuracy"></a>Expiration Accuracy

Keys are expired in two ways, actively and passively:

-   With passive expiration, expiration is evaluated **whenever a key is accessed**. If the key is due to expire, it is deleted.
-   With active expiration, keys are evaluated **every three minutes**. If they are due to expire, they are deleted.

## <a id="loss-of-connections"></a>Loss of Connections

There are a number of events that might occur within the <%=vars.product_name%> cluster that can result
in the cluster closing the connection to the Redis client. Losing the connection to the cluster does not
imply that the server is no longer available.

When the connection is lost, the client should attempt to reconnect to the same server before
attempting to connect to another server.
The Redis client is responsible for knowing the addresses of all servers.

In the case of a connection failure, an invoked command may or may not complete.
The Redis client is responsible for deciding if the command should be retried.
