---
title:  Installing the HTTP Module for Tomcat
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

This topic describes how to install the HTTP session management module for Tomcat.

1.  If you have not already installed Tomcat, download the desired version from the [Apache Website](http://tomcat.apache.org/) and install it.
2.  Following the Apache Tomcat convention, this page assumes the CATALINA_HOME environment variable is set to the root directory of the "binary" Tomcat distribution.
  For example, if Apache Tomcat is installed in `/usr/bin/apache-tomcat-9.0.62` then

    ```
    CATALINA_HOME=/usr/bin/apache-tomcat-9.0.62
    ```
    Define $CATALINA_HOME if it is not already defined.
  
3.  For development purposes, you may find it helpful to establish manager-level access to Tomcat. To do so, edit the file `$CATALINA_HOME/conf/tomcat-users.xml`.
  Uncomment the following line, and replace the `<must-be-changed>` placeholder with a password of your own choosing:

    ```
      <user username="admin" password="<must-be-changed>" roles="manager-gui"/>
    ```
    This creates an admin/password credential you can use to view system information when following links from the Tomcat home page.

4.  The HTTP Session Management Module for Tomcat is included in the <%=vars.product_name%> installation package. After you install <%=vars.product_name_long%>, you will find the module in the `tools/Modules` directory of the installation with a name of the form `Apache_Geode_Modules-SERVER-VERSION-Tomcat.zip`, where SERVER-VERSION is the <%=vars.product_name_long%> version number.

5.  Set your current working directory to the `$CATALINA_HOME` directory (or wherever you installed the application server) and unzip the HTTP Session Management Module.
This adds jar files to the `lib` subdirectory and XML files to the `conf` subdirectory.

    ```
    cd $CATALINA_HOME
    unzip $GEODE_HOME/tools/Modules/Apache_Geode_Modules-SERVER-VERSION-Tomcat.zip
    ```
6.  Copy the following jar files from the <%=vars.product_name%> `lib` subdirectory to the `lib` subdirectory of your Tomcat server (`$CATALINA_HOME/lib`), adding version numbers to the filenames as needed:
    * antlr jar
    * classgraph jar
    * commons-beanutils jar
    * commons-codec jar
    * commons-collections jar
    * commons-io jar
    * commons-lang3 jar
    * commons-logging jar
    * commons-math3 jar
    * commons-modeler jar
    * commons-validator jar
    * fastutil jar
    * geo jar
    * geode-common jar
    * geode-connectors jar
    * geode-core jar
    * geode-cq jar
    * geode-gfsh jar
    * geode-http-service jar
    * geode-log4j jar
    * geode-logging jar
    * geode-lucene jar
    * geode-management jar
    * geode-membership jar
    * geode-memcached jar
    * geode-old-client-support jar
    * geode-protobuf jar
    * geode-protobuf-messages jar
    * geode-rebalancer jar
    * geode-redis jar
    * geode-serialization jar
    * geode-tcp-server jar
    * geode-unsafe jar
    * geode-wan jar
    * grumpy-core jar
    * HdrHistogram jar
    * HikariCP jar
    * httpclient jar
    * httpcore jar
    * istack-commons-runtime jar
    * jackson-annotations jar
    * jackson-core jar
    * jackson-databind jar
    * javax.activation jar
    * javax.activation-api jar
    * javax.mail-api jar
    * javax.resource-api jar
    * javax.servlet-api jar
    * javax.transaction-api jar
    * jaxb-api jar
    * jaxb-impl jar
    * jetty-http jar
    * jetty-io jar
    * jetty-security jar
    * jetty-server jar
    * jetty-servlet jar
    * jetty-util jar
    * jetty-util-ajax jar
    * jetty-webapp jar
    * jetty-xml jar
    * jgroups jar
    * jline jar
    * jna jar
    * jna-platform jar
    * jopt-simple jar
    * LatencyUtils jar
    * log4j-api jar
    * log4j-core jar
    * log4j-jcl jar
    * log4j-jul jar
    * log4j-slf4j-impl jar
    * lucene-analyzers-common jar
    * lucene-analyzers-phonetic jar
    * lucene-core jar
    * lucene-queries jar
    * lucene-queryparser jar
    * micrometer-core jar
    * mx4j jar
    * mx4j-remote jar
    * mx4j-tools jar
    * netty-all jar
    * protobuf-java jar
    * rmiio jar
    * shiro-cache jar
    * shiro-config-core jar
    * shiro-config-ogdl jar
    * shiro-core jar
    * shiro-crypto-cipher jar
    * shiro-crypto-core jar
    * shiro-crypto-hash jar
    * shiro-event jar
    * shiro-lang jar
    * slf4j-api jar
    * snappy jar
    * spring-core jar
    * spring-jcl jar
    * spring-shell jar
    * swagger-annotations jar

Proceed to [Setting Up the HTTP Module for Tomcat](./tomcat_setting_up_the_module.html) to complete your Tomcat configuration.
