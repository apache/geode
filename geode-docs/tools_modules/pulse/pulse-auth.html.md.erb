---
title: Configuring Pulse Authentication
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

Pulse requires all users to authenticate themselves before they can use the Pulse Web application.

If you run Pulse in embedded mode, the Pulse application runs on the JMX Manager node and no JMX authentication is required. You do not need to specify valid JMX credentials to start an embedded Pulse application.

If you host Pulse on a Web Application server (non-embedded mode) and you configure JMX authentication on the <%=vars.product_name%> manager node, then the Pulse Web application must authenticate itself with the manager node when it starts. Specify the credentials of a valid JMX user account in the `pulse.properties` file, as described in [Hosting Pulse on a Web Application Server](pulse-hosted.html).

**Note:**
The credentials that you specify must have both read and write privileges in the JMX Manager node. See [Configuring a JMX Manager](../../managing/management/jmx_manager_operations.html#topic_263072624B8D4CDBAD18B82E07AA44B6).

# Configuring Pulse to Use HTTPS

You can configure Pulse to use HTTPS in either embedded or non-embedded mode.

In non-embedded mode where you are running Pulse on a standalone Web application server, you must use the Web server's SSL configuration to make the HTTP requests secure.

In embedded mode, <%=vars.product_name%> uses an embedded Jetty server to host the
Pulse Web application. To make the embedded server use HTTPS, you must
enable the `http` SSL component in
`gemfire.properties` or `gfsecurity.properties`.
See [SSL](../../managing/security/ssl_overview.html) for details on configuring these parameters.

These SSL parameters apply to all HTTP services hosted on the JMX Manager, which includes the following:

-   Developer REST API service
-   Management REST API service (for remote cluster management)
-   Pulse monitoring tool

When the `http` SSL component is enabled, all HTTP services become
SSL-enabled and you must configure your client applications
accordingly. For SSL-enabled Pulse, you will need to configure your
browsers with proper certificates.

# Configuring Pulse to Use Geode Security Manager for Authentication/Authorization

**Embedded Mode (Jetty)**

You don't need to do anything for this setup. Pulse will automatically be configured by Geode to send the credentials entered in Pulse login page to the Security Manager for authentication and authorization.

**Non-Embedded (Standalone Web Server) Mode (Tomcat)**

You need to configure the Pulse web app to use a geode specific security profile by activating the geode profile at startup with the system property:

``` pre
-Dspring.profiles.active=pulse.authentication.gemfire
```

# Configuring Pulse to use Custom Security Profile

This would only work if you are NOT using a security manager to in your cluster. The custom security profile only controls who can access Pulse web page. You will need to create a xml file named `pulse-authentication-custom.xml` that defines the credentials and roles of the users of Pulse.

**Example pulse-authentication-custom.xml for Spring simple in-memory User Details Service**

``` pre
<beans:beans >
  <authentication-manager>
    <authentication-provider>
      <user-service id="userDetailsService">
        <user name="john" password="johnspassword" authorities="ROLE_USER " />
        <user name="bob" password="bobspassword" authorities="ROLE_USER" />
      </user-service>
    </authentication-provider>
  </authentication-manager>
</beans:beans>
```

**Embedded Mode (Jetty)**

put `pulse-authentication-custom.xml` in the locator's working directory. When you start Geode members, specify the custom authentication profile using the `-Dspring.profiles.active=pulse.authentication.custom` system property. For example:

``` pre
gfsh> start locator --name=locator --J=-Dspring.profiles.active=pulse.authentication.custom
```

Start Pulse and log in using credentials that are authorized in the custom configuration.


**Non-Embedded (Standalone Web Server) Mode (Tomcat)**

put `pulse-authentication-custom.xml` in the Pulse web app's classpath, and start the app with the system property:

``` pre
-Dspring.profiles.active=pulse.authentication.custom
```

Start Pulse and log in using credentials that are authorized in the custom configuration.

# Configuring Pulse to Use OAuth Authentication Provider

You can configure Pulse to use any Authentication Provider that supports OpenID and custom scopes. You will need to register with the authentication provider and get a valid client ID and client secret for pulse, and configure the scopes with "CLUSTER:READ", "CLUSTER:WRITE", "DATA:READ", "DATA:WRITE".

After you set up the authentication provider properly, you will need to create/edit a property file named `pulse.properties` with the following configuration:

**Example pulse.properties for OAuth configuration**

``` pre
pulse.oauth.provider=uaa
pulse.oauth.clientId=<client id>
pulse.oauth.clientSecret=<client secret>
pulse.oauth.authorizationUri=http://example.com/uaa/oauth/authorize
pulse.oauth.tokenUri=http://example.com/uaa/oauth/token
pulse.oauth.userInfoUri=http://example.com/uaa/userinfo
pulse.oauth.jwkSetUri=http://example.com/uaa/token_keys
pulse.oauth.userNameAttributeName=user_name
```

**Embedded Mode (Jetty)**

1.  Create the above `pulse.properties` file and put it in the member's working dir.
2.  start up the member with a geode property (either specify it in `gemfire.proeprties` file or pass it in at start up) `security-auth-token-enabled-components=pulse`
``` pre
    gfsh> start locator --name=locator --J=-Dgemfire.security-auth-token-enabled-components=pulse (or all)
```
Start pulse and you will see login page being redirected to the configured authentication provider.

**Non-Embedded (Standalone Web Server) Mode (Tomcat)**

1.  Edit the existing `pulse.properties` file and add the above content, make sure the file is in the web app's classpath
2.  start the app with the system property:

``` pre
-Dspring.profiles.active=pulse.authentication.oauth
```
Start pulse and you will see login page being redirected to the configured authentication provider.
