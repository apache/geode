
## <a id="transactional_function_example" class="no-quick-link"></a>Transaction Embedded within a Function Example

This example demonstrates a function that does transactional updates to Customer and Order regions.

``` pre

// Filters restrict (and filter, duh!) which server runs the function.
// They are a "list" of keys, and only the server with the primary bucket
// has its function invoked with its set of keys.
/**
 * This function does transactional updates to customer and order regions
 */
public class TransactionalFunction extends FunctionAdapter {

  private Random random = new Random();
  /* (non-Javadoc)
   * @see org.apache.geode.cache.execute.FunctionAdapter#execute(org.apache.geode.cache.execute.FunctionContext)
   */
  @Override
  public void execute(FunctionContext context) {
    RegionFunctionContext rfc = (RegionFunctionContext)context;
    Region<CustomerId, String> custRegion = rfc.getDataSet();
    Region<OrderId, String> 
        orderRegion = custRegion.getRegionService().getRegion("order");

    CacheTransactionManager 
        mgr = CacheFactory.getAnyInstance().getCacheTransactionManager();
    // acquire the (assumed) single key of the single customer to be updated (specified
    // within the filter)
    CustomerId custToUpdate = (CustomerId)rfc.getFilter().iterator().next();
    
    // rfc contains single argument from the client, which is the key
    // within the orders region that needs to be updated
    OrderId orderToUpdate = (OrderId)rfc.getArguments();

    // placing an order into the customer's entry within customer region
    // also adding a new order into the order region
    
    mgr.begin();
    
   
    //  This essentially places random stuff into the customer
    custRegion.put(custToUpdate, 
        "updatedCustomer_"+custToUpdate.getCustId()+"_"+randomInt);
    
    //  This essentially places random stuff into the order
    orderRegion.put(orderToUpdate, 
        "newOrder_"+orderToUpdate.getOrderId()+"_"+randomInt);
    mgr.commit();
   
    context.getResultSender().lastResult(Boolean.TRUE);
  }

  /* (non-Javadoc)
   * @see org.apache.geode.cache.execute.FunctionAdapter#getId()
   */
  @Override
  public String getId() {
    return "TxFunction";
  }

}
```
