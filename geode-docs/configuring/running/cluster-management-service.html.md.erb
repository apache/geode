---
title: Cluster Management Service
---

<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

**Note:** This feature is experimental and is subject to change in future releases of <%=vars.product_name_long%>.

The cluster management service enables you to change the configuration of
the cluster (for example, create/destroy regions, indexes, or gateway receivers/senders) via rest service, and have these
changes replicated on all the applicable servers and persisted in the cluster configuration service.

This is different from Gfsh commands in:

- this is a rest interface that allows for more programmable access

- changes to all elements of the cluster are applied in a consistent manner to the cluster

- you can invoke this rest service from a server (via function) or from any client application

- you can configure your cluster without having any servers running (only a locator is sufficient).

- not all gfsh commands capabilities are available in this rest service. Some of these dropped support are deliberate because Geode wants to simplify configuration management, some are just timing.

Currently, Geode provide a java client and go client that interacts with this rest service.

## Start Cluster Management Rest Service
Every locator started by Gfsh will start Cluster Management Rest Service by default. The following are the Geode properties that control
whether this service will be started correctly or not:

- http-service-port: it needs to be be set to a non 0 value. Otherwise, there won't be any http service available on this locator. Default value is 7070.

- enable-cluster-configuration: default is true. If this is set to false, the cluster management rest service will return error status in every invocation.

- enable-management-rest-service: default is true. This will also start jmx manager automatically on the locator if not started. If set false, the rest service will not be started.

By default, every request/response through the Cluster Management Rest Service is logged in debug level. If you would like to bump the logging to info level,
you need to set the system property "-Dgeode.management.request.logging=true" when you start up the locator.

## <a id='cms-reference'>Cluster Management Service REST API</a>

The cluster management service REST API adheres to standard REST semantics, so users can use POST, PATCH, DELETE, and GET to create,
update, delete, and read, respectively.

Here is a list of Rest API documentation for each version of Geode: [Cluster Management Service Rest API](https://cwiki.apache.org/confluence/display/GEODE/Cluster+Management+Service+Rest+API)

This version of <%=vars.product_name%> uses the [<%=vars.product_version_geode%>.0 Management REST API](https://cwiki.apache.org/confluence/display/GEODE/<%=vars.product_version_geode%>.0+Management+REST+API+-+v1).

### <a id='cms-security'>Authentication and Authorization</a>

The cluster management service REST API is secured by the <code class="ph codeph">security-manager</code> of your cluster. If a security-manager is specified, you must provide authorization in order to invoke the REST api.

By default, the security manager accepts authorization for REST API access in the form of a username/password pair:

```
curl --user username:password http://example.com/management/regions
```

When <code class="ph codeph">security-auth-token-enabled-components</code> is set to "all" or "management",
you must provide REST API authorization in the form of a valid bearer token (instead of username/password):

```
curl -H "Authorization: Bearer YWhhbWlsdG9uQGFwaWdlZS5jb206bXlwYXNzdzByZAo" http://example.com/management/regions
```

## <a id='cms-java-api'>Cluster Management Service Java API</a>

Geode provides a java client allows you to use this rest service in your java application. To use it, you will need to follow these steps:

- include `geode-management.jar` in your client classpath.

- use `ClusterManagementServiceBuilder` class to build a `ClusterManagementService` object, using the various methods available on the builder to set the connection configurations.

- start using the `ClsuterManagementService` to interact with the cluster.

Example:

```
ClusterManagementService cmsClient = new ClusterManagementServiceBuilder()
        .setHost("localhost")
        .setPort("7070")
        .build();
Region regionConfig = new Region();
ClusterManagementListResult<Region, RuntimeRegionInfo> list = client.list(region);
```

## <a id='cms-cli'>Cluster Management Service CLI Tool</a>

Geode also provides a go client that interact with this service. You can obtain this tool here: https://github.com/gemfire/tanzu-gemfire-management-cf-plugin

After [download](https://github.com/gemfire/tanzu-gemfire-management-cf-plugin/releases) this tool, you can use it to interact with any running cluster:

Example:

```
./gemfire http://localhost:7070 list regions
```