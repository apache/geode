/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

evaluationDependsOn(":geode-core")

repositories {
  maven {
    // docker-compose-rule is published on bintray
    url 'https://dl.bintray.com/palantir/releases'
  }
}

dependencies {
  gradleLint.ignore {
    // See GEODE-6128 -- ignore xml-apis in linter to avoid changes with every run.
    compile('xml-apis:xml-apis:1.4.01')
  }
  compile('com.fasterxml.jackson.core:jackson-core:2.9.7')
    compile('com.fasterxml.jackson.core:jackson-databind:2.9.7')
    testCompile('org.mockito:mockito-core:2.23.0')
    testCompile('org.assertj:assertj-core:3.11.1')
    testCompile('junit:junit:4.12')
  compile(project(':geode-common'))
  compile(project(':geode-core'))
  testCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  integrationTestCompile(project(':geode-dunit')) {
    exclude module: 'geode-core'
  }
  integrationTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  distributedTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  distributedTestCompile(project(':geode-dunit')){
    exclude module: 'geode-core'
  }
  acceptanceTestCompile(project(':geode-dunit')) {
    exclude module: 'geode-core'
  }
  acceptanceTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }

  compile("com.zaxxer:HikariCP:${project.'HikariCP.version'}")
  compile("org.apache.commons:commons-lang3:${project.'commons-lang3.version'}")
  compile("javax.xml.bind:jaxb-api:${project.'jaxb.version'}")
  compile("org.apache.logging.log4j:log4j-api:${project.'log4j.version'}")
  compile("org.apache.logging.log4j:log4j-jcl:${project.'log4j.version'}") {
    ext.optional = true
  }
  compile("org.springframework.shell:spring-shell:${project.'spring-shell.version'}") {
    exclude module: 'aopalliance'
    exclude module: 'asm'
    exclude module: 'cglib'
    exclude module: 'guava'
    exclude module: 'spring-aop'
    exclude module: 'spring-context-support'
    exclude module: 'spring-core'
    ext.optional = true
  }

  testCompile("pl.pragmatists:JUnitParams:${project.'JUnitParams.version'}")

  integrationTestCompile("junit:junit:${project.'junit.version'}")
  integrationTestCompile("org.assertj:assertj-core:${project.'assertj-core.version'}")
  integrationTestCompile("pl.pragmatists:JUnitParams:${project.'JUnitParams.version'}")

  distributedTestCompile("junit:junit:${project.'junit.version'}")
  distributedTestCompile("org.assertj:assertj-core:${project.'assertj-core.version'}")
  distributedTestCompile("org.mockito:mockito-core:${project.'mockito-core.version'}")
  distributedTestCompile("pl.pragmatists:JUnitParams:${project.'JUnitParams.version'}")
  distributedTestRuntime("org.apache.derby:derby:${project.'derby.version'}")

  acceptanceTestCompile("com.github.stefanbirkner:system-rules:${project.'system-rules.version'}") {
    exclude module: 'junit-dep'
  }
  acceptanceTestCompile("junit:junit:${project.'junit.version'}")
  acceptanceTestCompile("org.assertj:assertj-core:${project.'assertj-core.version'}")
  acceptanceTestCompile("org.awaitility:awaitility:${project.'awaitility.version'}")
  acceptanceTestCompile("org.mockito:mockito-core:${project.'mockito-core.version'}")
  acceptanceTestCompile("com.palantir.docker.compose:docker-compose-rule-core:${project.'docker-compose-rule.version'}")
  acceptanceTestCompile("pl.pragmatists:JUnitParams:${project.'JUnitParams.version'}")
  acceptanceTestCompile("com.palantir.docker.compose:docker-compose-rule-junit4:${project.'docker-compose-rule.version'}")

  acceptanceTestRuntime("mysql:mysql-connector-java:${project.'mysql-connector.version'}")
  acceptanceTestRuntime("org.apache.derby:derby:${project.'derby.version'}")
  acceptanceTestRuntime("org.postgresql:postgresql:${project.'postgresql.version'}")
}

integrationTest.forkEvery 0
