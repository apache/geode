/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

repositories {
    maven {
        url 'https://dl.bintray.com/palantir/releases'
        // docker-compose-rule is published on bintray
    }
}

dependencies {
    compile project(':geode-core')
    compile project(':geode-common')
    compile group: 'com.zaxxer', name: 'HikariCP', version: project.'HikariCP.version'


    testCompile project(':geode-junit')

    //Connectors test framework.
    testRuntime 'org.apache.derby:derby:' + project.'derby.version'
    testCompile group: 'mysql', name: 'mysql-connector-java', version: '5.1.46'
    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
    testCompile 'com.palantir.docker.compose:docker-compose-rule-junit4:0.31.1'
    testCompile 'com.pholser:junit-quickcheck-core:' + project.'junit-quickcheck.version'
    testCompile 'com.pholser:junit-quickcheck-generators:' + project.'junit-quickcheck.version'
    testCompile files(project(':geode-core').sourceSets.test.output)
    testCompile files(project(':geode-old-versions').sourceSets.main.output)
}



task xjc (type: Exec){
    description 'Generates initial, incomplete POJO configuration objects using JAXB / xjc.  ' +
            'Use this task as a reference to keep etc/example-bindings.xjb ' +
            'and the etc/*.episode files up to date.  ' +
            'Intended as an internal developer tool only.'
    dependsOn(':geode-core:xjc')

    def sourceXsd = "${projectDir}/src/main/resources/META-INF/schemas/geode.apache.org/schema/jdbc/jdbc-1.0.xsd"
    def jaxBindings = "${projectDir}/src/main/resources/META-INF/schemas/geode.apache.org/schema/jdbc/bindings.xjb"
    def classPath = "${projectDir}/../geode-core/src/main/java"

    // It is not currently needed (and is currently breaking) to pass the core episode to this task.
    // If it does become necessary, pass it as a binding (an additional -b) in the xjc command.
    def coreEpisode = "${projectDir}/../etc/geode-core.episode"

    def outputDir = "${projectDir}/build/generated-src/main/"
    def outputPackage = "org.apache.geode.cache.configuration"
    def outputEpisode = "${projectDir}/../etc/geode-connectors.episode"

    doFirst{
        workingDir projectDir
        mkdir outputDir
    }

    workingDir projectDir
    commandLine 'sh', '-c',
            "xjc -extension -p ${outputPackage} -d ${outputDir} -episode ${outputEpisode} " +
                "-no-header -b ${jaxBindings} -classpath ${classPath} -contentForWildcard -npa ${sourceXsd}"

}

integrationTest.forkEvery 0
