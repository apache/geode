/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact;


apply plugin: 'distribution'

jar.enabled = false
extraArchive {
  sources = false
  javadoc = false
  tests = false
}

// We are not publishing anything from this project into maven and using two distributions seems
// to break the nexus plugin.  So we delete the nexus tasks but we have to replace the upload task
// with an empty task of the same name...argh.
afterEvaluate {
  tasks.remove(install)
  tasks.remove(uploadArchives)
  task uploadArchives << { }
}

// Gradle doesn't automatically remove the jar artifact even though we disabled it
// this causes publishing to fail.  So we nuke all the disabled artifacts from all configurations.
configurations.all {
  artifacts.removeAll artifacts.findAll { it instanceof ArchivePublishArtifact && !it.archiveTask.enabled }
}


dependencies {
  provided project(':gemfire-core')
  
  archives project(':gemfire-common')  
  archives project(':gemfire-json')  
  archives project(':gemfire-joptsimple')  
  archives project(':gemfire-core')  
  archives project(':gemfire-lucene')
  archives project(':gemfire-web')
  archives project(':gemfire-web-api')
  archives project(':gemfire-pulse')

  testCompile project(path: ':gemfire-junit', configuration: 'testOutput')
  testCompile project(path: ':gemfire-core', configuration: 'testOutput')

  testRuntime files("${System.getProperty('java.home')}/../lib/tools.jar")
}

sourceSets {
  // need to remove this since we use the dependencies jar out of the install dir
  //test.runtimeClasspath -= configurations.provided
}

test {
  // test from the actual classpath not the gradle classpath
  dependsOn installDist
  // @TODO: this doesn't seem to be working need to get basename first.
  classpath += files "$buildDir/install/apache-geode/lib/gemfire-core-dependencies.jar"
}

tasks.withType(Test){
  environment 'GEMFIRE', "$buildDir/install/${distributions.main.baseName}/lib"
}

task defaultDistributionConfig(type: JavaExec, dependsOn: classes) {
  outputs.file file("$buildDir/gemfire.properties")
  main 'com.gemstone.gemfire.distributed.internal.DistributionConfigImpl'
  classpath project(':gemfire-core').sourceSets.main.runtimeClasspath
  workingDir buildDir
  
  doFirst {
    buildDir.mkdirs()
  }
}

task defaultCacheConfig(type: JavaExec, dependsOn: classes) {
  outputs.file file("$buildDir/cache.xml")
  main 'com.gemstone.gemfire.internal.cache.xmlcache.CacheXmlGenerator'
  classpath project(':gemfire-core').sourceSets.main.runtimeClasspath
  workingDir buildDir

  doFirst {
    buildDir.mkdirs()
  }
}

// This closure sets the gemfire classpath.  If we add another jar to the classpath it must
// be included in the filter logic below.
def cp = {
  // first add all the dependent project jars
  def jars = configurations.archives.dependencies.collect { it.dependencyProject }
    .findAll { !it.name.contains('web') }
    .collect { it.jar.archiveName }
    .join(' ')

  // then add all the dependencies of the dependent jars
  jars += ' ' + configurations.archives.dependencies.collect { 
    it.dependencyProject.configurations.runtime.collect { it.getName() }.findAll {
      // depedencies from gemfire-core
      it.contains('antlr') ||
      it.contains('commons-io') ||
      it.contains('commons-lang') ||
      it.contains('commons-logging') ||
      it.contains('fastutil') ||
      it.contains('jackson-annotations') ||
      it.contains('jackson-core') ||
      it.contains('jackson-databind') ||
      it.contains('jansi') ||
      it.contains('javax.resource-api') ||
      it.contains('javax.servlet-api') ||
      it.contains('javax.transaction-api') ||
      it.contains('jetty-http') ||
      it.contains('jetty-io') ||
      it.contains('jetty-security') ||
      it.contains('jetty-server') ||
      it.contains('jetty-servlet') ||
      it.contains('jetty-webapp') ||
      it.contains('jetty-util') ||
      it.contains('jetty-xml') ||
      it.contains('jline') ||
      it.contains('jna') ||
      it.contains('log4j-api') ||
      it.contains('log4j-core') ||
      it.contains('log4j-jcl') ||
      it.contains('log4j-jul') ||
      it.contains('log4j-slf4j-impl') ||
      it.contains('slf4j-api') ||
      it.contains('spring-core') ||
      it.contains('spring-shell') ||
      it.contains('snappy-java') ||
      it.contains('hbase') ||
      it.contains('jgroups') ||
      it.contains('netty') ||
      
      // dependencies from gemfire-lucene
      it.contains('lucene-analyzers-common') ||
      it.contains('lucene-core') ||
      it.contains('lucene-queries') ||
      it.contains('lucene-queryparser')
    }
  }.flatten().unique().join(' ')

  return jars
}

// Note: this dependency doesn't work if you change a library version from
// a dependent project.  Please fix me.
task depsJar (type: Jar, dependsOn: ':gemfire-core:classes') {
  description 'Assembles the jar archive that defines the gemfire classpath.'
  archiveName 'gemfire-core-dependencies.jar'
  doFirst {
    manifest { 
      attributes("Class-Path": cp())
    }
  }
}

// Note: this dependency doesn't work if you change a library version from
// a dependent project.  Please fix me.
task gfshDepsJar (type: Jar, dependsOn: ':gemfire-core:classes') {
  description 'Assembles the jar archive that defines the gfsh classpath.'
  def springWeb = configurations.runtime.collect { it.getName() }.find { it.contains('spring-web') }
  archiveName 'gfsh-dependencies.jar'
  doFirst {
    manifest {
      attributes("Class-Path": cp() + 
        ' ' + project(':gemfire-core').webJar.archiveName +
        ' ' + springWeb
      )
    }
  }
}

gradle.taskGraph.whenReady( { graph ->
  tasks.withType(AbstractArchiveTask).findAll {
    it.name.toLowerCase().contains("dist")
  }.each { archive ->
    archive.doLast {
      ant.checksum file:"${archive.archivePath}", algorithm:"md5"
      ant.checksum file:"${archive.archivePath}", algorithm:"sha-256"
    }
  }
})

distributions {
  src {
    baseName = 'apache-geode-src'
    contents {
      from (rootDir) {
        exclude 'KEYS'
        exclude 'gradlew'
        exclude 'gradlew.bat'
        exclude 'gradle/wrapper/gradle-wrapper.jar'
        exclude 'gradle/wrapper/gradle-wrapper.properties'
        exclude '.gradle'
        exclude '**/build/**'
        exclude '**/.project'
        exclude '**/.classpath'
        exclude '**/.settings/**'
        exclude '**/build-eclipse/**'
        exclude '.idea/**'
        exclude '**/*.iml'
        exclude '**/*.ipr'
        exclude '**/*.iws'
        exclude '**/tags'
      }
    }
  }

  main {
    baseName = 'apache-geode' //TODO rootProject.name
    contents {
      duplicatesStrategy 'exclude'
      exclude '*.asc'
      
      exclude '*.asc'
      exclude '*-sources.jar'
      exclude '*-javadoc.jar'

      into ('config') {
        from defaultCacheConfig
        from defaultDistributionConfig
        from (project(':gemfire-core').sourceSets.main.resources.files.find {
          it.name == 'log4j2.xml' 
        })
      }
      
      into ('lib') {
        from project(":gemfire-common").configurations.runtime
        from project(":gemfire-common").configurations.archives.allArtifacts.files

        from project(":gemfire-json").configurations.runtime
        from project(":gemfire-json").configurations.archives.allArtifacts.files

        from project(":gemfire-joptsimple").configurations.runtime
        from project(":gemfire-joptsimple").configurations.archives.allArtifacts.files

        from project(":gemfire-core").configurations.runtime
        // Copying from provided configuration is only for supporting Spring Data GemFire.
        // If there are more dependencies added to provided configuration, this will need
        // to change
        from (project(":gemfire-core").configurations.provided) {
          include 'spring-data-gemfire-*'
        }
        from project(":gemfire-core").configurations.archives.allArtifacts.files
        from project(":gemfire-core").webJar
        from project(":gemfire-core").raJar
        from project(":gemfire-core").jcaJar
        
        from project(":gemfire-lucene").configurations.runtime
        from project(":gemfire-lucene").configurations.archives.allArtifacts.files

        // include this jar        
        from project(":gemfire-web-api").jar
        
        // dependency jars
        from depsJar
        from gfshDepsJar
      }

      into ('tools/Extensions') {
        from (project(":gemfire-web").configurations.archives.allArtifacts.files) {
          exclude '*.jar'
        }
        from (project(":gemfire-web-api").configurations.archives.allArtifacts.files) {
          exclude '*.jar'
        }
      }

      into ('tools/Pulse') {
        from (project(":gemfire-pulse").configurations.archives.allArtifacts.files) {
          exclude '*.jar'
        }
      }
    }
  }
}

// Create a configuration closure to configure test targets with the install directory
def dependOnInstalledProduct = {
  dependsOn installDist
  def install = file("$buildDir/install/${distributions.main.baseName}")
  environment ('GEMFIRE', install)
}

// Add the configuration closure to the test targets so they depend on the install directory
test dependOnInstalledProduct
distributedTest dependOnInstalledProduct
integrationTest dependOnInstalledProduct

// Make build final task to generate all test and product resources
build.dependsOn installDist
