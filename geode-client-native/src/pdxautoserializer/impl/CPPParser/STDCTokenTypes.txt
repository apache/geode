// $ANTLR 2.7.7 (20130409): CPP_parser.g -> STDCTokenTypes.txt$
STDC    // output token vocab name
LITERAL_template="template"=4
LESSTHAN=5
GREATERTHAN=6
LITERAL_typedef="typedef"=7
SEMICOLON=8
LITERAL_enum="enum"=9
ID=10
LCURLY=11
LITERAL_inline="inline"=12
LITERAL_friend="friend"=13
LITERAL_namespace="namespace"=14
LITERAL_antlrTrace_on="antlrTrace_on"=15
LITERAL_antlrTrace_off="antlrTrace_off"=16
RCURLY=17
ASSIGNEQUAL=18
COLON=19
LITERAL_extern="extern"=20
StringLiteral=21
LITERAL_struct="struct"=22
LITERAL_union="union"=23
LITERAL_class="class"=24
LITERAL__stdcall="_stdcall"=25
LITERAL___stdcall="__stdcall"=26
LITERAL_GFEXCLUDE="GFEXCLUDE"=27
LITERAL_GFINCLUDE="GFINCLUDE"=28
LITERAL_GFID="GFID"=29
LITERAL_GFUNREAD="GFUNREAD"=30
LITERAL_GFARRAYSIZE="GFARRAYSIZE"=31
LPAREN=32
RPAREN=33
LITERAL_GFARRAYSIZES="GFARRAYSIZES"=34
LITERAL_GFARRAYELEMSIZE="GFARRAYELEMSIZE"=35
LITERAL_auto="auto"=36
LITERAL_register="register"=37
LITERAL_static="static"=38
LITERAL_mutable="mutable"=39
LITERAL__inline="_inline"=40
LITERAL___inline="__inline"=41
LITERAL_virtual="virtual"=42
LITERAL_explicit="explicit"=43
LITERAL_typename="typename"=44
LITERAL_char="char"=45
LITERAL_wchar_t="wchar_t"=46
LITERAL_bool="bool"=47
LITERAL_short="short"=48
LITERAL_int="int"=49
"_int8"=50
"__int8"=51
"int8_t"=52
"_int16"=53
"__int16"=54
"int16_t"=55
"_int32"=56
"__int32"=57
"int32_t"=58
"_int64"=59
"__int64"=60
"int64_t"=61
"uint8_t"=62
"uint16_t"=63
"uint32_t"=64
"uint64_t"=65
"_w64"=66
"__w64"=67
LITERAL_long="long"=68
LITERAL_signed="signed"=69
LITERAL_unsigned="unsigned"=70
LITERAL_float="float"=71
LITERAL_double="double"=72
LITERAL_void="void"=73
LITERAL__declspec="_declspec"=74
LITERAL___declspec="__declspec"=75
LITERAL_const="const"=76
LITERAL___const="__const"=77
LITERAL_volatile="volatile"=78
LITERAL___volatile__="__volatile__"=79
LITERAL_GFIGNORE="GFIGNORE"=80
COMMA=81
LITERAL_public="public"=82
LITERAL_protected="protected"=83
LITERAL_private="private"=84
OPERATOR="operator"=85
LITERAL_this="this"=86
LITERAL_true="true"=87
LITERAL_false="false"=88
OCTALINT=89
LSQUARE=90
RSQUARE=91
TILDE=92
STAR=93
AMPERSAND=94
ELLIPSIS=95
LITERAL_throw="throw"=96
LITERAL_using="using"=97
LITERAL_case="case"=98
LITERAL_default="default"=99
LITERAL_if="if"=100
LITERAL_else="else"=101
LITERAL_switch="switch"=102
LITERAL_while="while"=103
LITERAL_do="do"=104
LITERAL_for="for"=105
LITERAL_goto="goto"=106
LITERAL_continue="continue"=107
LITERAL_break="break"=108
LITERAL_return="return"=109
LITERAL_try="try"=110
LITERAL_catch="catch"=111
LITERAL_asm="asm"=112
LITERAL__asm="_asm"=113
LITERAL___asm="__asm"=114
LITERAL___asm__="__asm__"=115
TIMESEQUAL=116
DIVIDEEQUAL=117
MINUSEQUAL=118
PLUSEQUAL=119
MODEQUAL=120
SHIFTLEFTEQUAL=121
SHIFTRIGHTEQUAL=122
BITWISEANDEQUAL=123
BITWISEXOREQUAL=124
BITWISEOREQUAL=125
QUESTIONMARK=126
OR=127
AND=128
BITWISEOR=129
BITWISEXOR=130
NOTEQUAL=131
EQUAL=132
LESSTHANOREQUALTO=133
GREATERTHANOREQUALTO=134
SHIFTLEFT=135
SHIFTRIGHT=136
PLUS=137
MINUS=138
DIVIDE=139
MOD=140
DOTMBR=141
POINTERTOMBR=142
PLUSPLUS=143
MINUSMINUS=144
LITERAL_sizeof="sizeof"=145
LITERAL___alignof__="__alignof__"=146
SCOPE=147
DOT=148
POINTERTO=149
LITERAL_dynamic_cast="dynamic_cast"=150
LITERAL_static_cast="static_cast"=151
LITERAL_reinterpret_cast="reinterpret_cast"=152
LITERAL_const_cast="const_cast"=153
LITERAL_typeid="typeid"=154
DECIMALINT=155
HEXADECIMALINT=156
CharLiteral=157
WCharLiteral=158
WStringLiteral=159
FLOATONE=160
FLOATTWO=161
NOT=162
LITERAL_new="new"=163
LITERAL__cdecl="_cdecl"=164
LITERAL___cdecl="__cdecl"=165
LITERAL__near="_near"=166
LITERAL___near="__near"=167
LITERAL__far="_far"=168
LITERAL___far="__far"=169
LITERAL___interrupt="__interrupt"=170
LITERAL_pascal="pascal"=171
LITERAL__pascal="_pascal"=172
LITERAL___pascal="__pascal"=173
LITERAL_delete="delete"=174
Whitespace=175
Comment=176
CPPComment=177
PREPROC_DIRECTIVE("a preprocessor directive")=178
LineDirective=179
Space=180
Pragma=181
Error=182
EndOfLine=183
Escape=184
Digit=185
Decimal=186
LongSuffix=187
UnsignedSuffix=188
FloatSuffix=189
Exponent=190
Vocabulary=191
Number=192
