/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "${rootDir}/${scriptDir}/standard-subproject-configuration.gradle"

apply from: "${project.projectDir}/../gradle/publish-java.gradle"
apply from: "${project.projectDir}/../gradle/warnings.gradle"
apply from: "${project.projectDir}/../gradle/jmh.gradle"

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'createVersionPropertiesFile')
  }
  test {
    output.dir(generatedResources, builtBy: 'createVersionPropertiesFile')
  }
}

// Creates the version properties file and writes it to the classes dir
task createVersionPropertiesFile(dependsOn: ':writeBuildInfo') {

  def propertiesFile = file(generatedResources + "/org/apache/geode/internal/GemFireVersion.properties")
  def scmInfoFile = rootProject.tasks.writeBuildInfo.outputs.files

  inputs.files {
    scmInfoFile
  }
  outputs.files {
    propertiesFile
  }


  doLast {
    def scmInfo = new Properties()
    new FileInputStream(scmInfoFile.singleFile).withStream { fis ->
      scmInfo.load(fis)
    }

    def props = [
            "Product-Name"      : productName,
            "Product-Version"   : version,
            "Build-Id"          : "${System.env.USER} ${buildId}".toString(),
            "Build-Date"        : new Date().format('yyyy-MM-dd HH:mm:ss Z'),
            "Build-Platform"    : "${System.properties['os.name']} ${System.properties['os.version']} ${System.properties['os.arch']}".toString(),
            "Build-Java-Vendor" : System.properties['java.vendor'],
            "Build-Java-Version": System.properties['java.version']
    ] as Properties
    props.putAll(scmInfo)

    propertiesFile.getParentFile().mkdirs()
    new FileOutputStream(propertiesFile).withStream { fos ->
      props.store(fos, '')
    }
  }
}

jar.dependsOn(createVersionPropertiesFile)

dependencies {
  // main
  implementation(platform(project(':boms:geode-all-bom')))
  implementation('com.fasterxml.jackson.core:jackson-databind')
  implementation('org.apache.commons:commons-lang3')


  // test
  implementation('org.apache.commons:commons-lang3')
  testImplementation('junit:junit')
  testImplementation('org.assertj:assertj-core')


  // jmhTest
  jmhTestImplementation('junit:junit')
  jmhTestImplementation('org.assertj:assertj-core')
}
