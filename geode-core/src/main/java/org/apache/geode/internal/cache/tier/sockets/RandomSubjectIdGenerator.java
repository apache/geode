/*
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License. You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.apache.geode.internal.cache.tier.sockets;

import java.util.Random;
import java.util.function.Consumer;

/**
 * Generates sequences of unique subject IDs based on a {@code Random} and an initializer function.
 *
 * <p>
 * <strong>Initialization and uniqueness.</strong> The generator initializes the {@code Random}
 * before calling {@code nextLong()} for the first time, and before generating the first ID after
 * each ID exhaustion (see below). The IDs generated by this generator are unique only between
 * initializations. That is, after each initialization, the generator may generate the same IDs
 * as before the initialization.
 * </p>
 * <p>
 * <strong>ID Exhaustion.</strong>After each initialization, the generator remembers the first
 * ID that it generates. If {@code nextLong()} returns that value again, the generator returns -1
 * to indicate that it has generated all possible unique IDs. It also arranges to re-initialize
 * the {@code Random} before generating the next ID.
 * </p>
 * <p>
 * If {@code generateId()} returns -1, the caller should handle the ID exhaustion before requesting
 * the next ID. For example, the caller might invalidate all uses of previously generated IDs.
 * </p>
 * <p>
 * If {@code Random.getNext()} returns {@code -1}, the generator discards the value and calls
 * {@code getNext()} again to generate an ID.
 * </p>
 */
public class RandomSubjectIdGenerator implements SubjectIdGenerator {
  private static final long IDS_EXHAUSTED = -1;
  private final Random random;
  private final Consumer<Random> initializer;
  private long firstGeneratedId;
  private boolean mustInitialize = true;

  /**
   * Constructs an ID generator that uses {@code random} to generate IDs and {@code
   * randomInitializer} to set the state of the {@code random}. A initializer should attempt to
   * leave {@code random} in a state distinct from that produced by any other invocation of the
   * initializer.
   */
  public RandomSubjectIdGenerator(Random random, Consumer<Random> randomInitializer) {
    this.random = random;
    initializer = randomInitializer;
  }

  @Override
  public long generateId() {
    if (mustInitialize) {
      initializer.accept(random);
    }
    long id;
    do {
      id = random.nextLong();
    } while (id == IDS_EXHAUSTED); // Discard all IDS_EXHAUSTED values

    if (id == firstGeneratedId) { // We generated this ID before
      mustInitialize = true; // Remember to re-initialize on the next call
      return IDS_EXHAUSTED; // Alert the user that IDs are exhausted
    }
    if (mustInitialize) {
      firstGeneratedId = id;
      mustInitialize = false;
    }
    return id;
  }
}
