import org.apache.geode.gradle.plugins.DependencyConstraints
import org.apache.tools.ant.taskdefs.condition.Os

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "${rootDir}/${scriptDir}/standard-subproject-configuration.gradle"
apply from: "${rootDir}/${scriptDir}/warnings.gradle"
apply plugin: 'com.palantir.docker'

dependencies {
  api(platform(project(':boms:geode-all-bom')))

  implementation(project(":geode-server-all"))

  // geodeArchives is a direct reflection of what is contained in geode-dependencies.jar. To that
  // end only add _test_ dependencies to acceptanceTestCompile/Runtime. All other product
  // dependencies should be a part of geodeArchives and should not need to be added as individual
  // dependencies here.
  acceptanceTestImplementation(project(':geode-dunit')) {
    exclude module: 'geode-core'
  }
  acceptanceTestImplementation(project(':geode-assembly:geode-assembly-test'))
  acceptanceTestImplementation(project(':geode-for-redis').sourceSets.commonTest.output)
  acceptanceTestImplementation('io.netty:netty-codec-redis')

  // This is used by 'gradle within gradle' tests. No need to bump this version; but if you do,
  // don't have it be the same version as the outer gradle version.
  acceptanceTestImplementation('org.gradle:gradle-tooling-api:' + DependencyConstraints.get('gradle-tooling-api.version'))

  acceptanceTestImplementation('org.testcontainers:testcontainers')

  acceptanceTestImplementation('org.springframework:spring-web')
  acceptanceTestImplementation('io.lettuce:lettuce-core')
  acceptanceTestImplementation('net.spy:spymemcached')

  acceptanceTestImplementation(project(':geode-logging'))
  acceptanceTestImplementation(project(':geode-log4j'))

  acceptanceTestImplementation('org.testcontainers:testcontainers')

  docker(project(path: ":geode-assembly", configuration: "installedGeode"))
}

docker {
  dependsOn(project(':geode-assembly').tasks.installDist)
  name "modulargeode:develop"
  copySpec.from(file("modularDocker/launch.sh")).into("/")
  copySpec.from(project(':geode-assembly').tasks.installDist).into('geode')
}

acceptanceTest {
  dependsOn(":geode-deployment:geode-deployment-test:shadowJar")
  dependsOn(":geode-deployment:geode-deployment-test:jar")
  environment 'GEODE_HOME', project(":geode-assembly").buildDir.toPath().resolve("install").resolve("apache-geode")
  systemProperty 'DEPLOY_TEST_SPRING_JAR', project(":geode-deployment:geode-deployment-test").tasks.shadowJar.outputs.files.singleFile
  systemProperty 'DEPLOY_TEST_SPRING_JAR_JAR', project(":geode-deployment:geode-deployment-test").tasks.jar.outputs.files.singleFile
  // This is specifically used by GradleBuildWithGeodeCoreAcceptanceTest
  systemProperty 'projectGroup', project.group
  if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
    dependsOn(tasks.docker)
  }
}

repositories {
  // For gradle tooling dependencies
  maven {
    url 'https://repo.gradle.org/gradle/libs-releases'
  }
}
