/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

ext.moduleName = 'org.apache.geode'

configurations {
  jarOnly {
    transitive = false
  }
}

dependencies {
  jarOnly(project(':geode-core'))
  jarOnly(project(':geode-common'))
  jarOnly(project(':geode-json'))
  jarOnly(project(':geode-cq'))

  // TODO find better way to deal with shiro split packages
  jarOnly('org.apache.shiro:shiro-core:' + project.'shiro.version')
}

project.afterEvaluate {

  def fqdn = { dependency ->
    dependency.group + ":" + dependency.name + ":" + dependency.version
  }

  def excludes = configurations.jarOnly.allDependencies.collect {fqdn(it)}

  configurations.jarOnly.allDependencies.each { dep ->
    if (dep instanceof DefaultProjectDependency) {
      configurations.compile.dependencies.addAll(
          dep.dependencyProject.configurations.compile.dependencies.findAll {!excludes.contains(fqdn(it))})
      configurations.runtime.dependencies.addAll(
          dep.dependencyProject.configurations.runtime.dependencies.findAll {!excludes.contains(fqdn(it))})
      configurations.runtimeOnly.dependencies.addAll(
          dep.dependencyProject.configurations.runtimeOnly.dependencies.findAll {!excludes.contains(fqdn(it))})
    }
  }
}

jar {
  inputs.property("moduleName", moduleName)
  manifest {
    attributes('Automatic-Module-Name': moduleName)
  }

  dependsOn configurations.jarOnly
  from {
    configurations.jarOnly.collect { zipTree(it) }
  }

}

