import org.apache.geode.gradle.plugins.DependencyConstraints

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'me.champeau.gradle.jmh' version '0.4.8'
}

apply from: "${rootDir}/${scriptDir}/standard-subproject-configuration.gradle"
apply from: "${rootDir}/${scriptDir}/warnings.gradle"

evaluationDependsOn(":geode-core")


dependencies {
    compile(platform(project(':boms:geode-all-bom')))
    distributedTestImplementation('junit:junit')
    implementation('mx4j:mx4j')
    distributedTestImplementation(project(':geode-logging'))
    testImplementation('org.httpunit:httpunit')
    testImplementation('org.apache.tomcat:tomcat-jaspic-api:' + DependencyConstraints.get('tomcat8.version'))
    testImplementation('org.httpunit:httpunit')
    testImplementation('junit:junit')
    testImplementation('org.assertj:assertj-core')
    testImplementation('org.mockito:mockito-core')
    testImplementation('pl.pragmatists:JUnitParams')
    testImplementation(project(':extensions:geode-modules-test'))
    distributedTestImplementation('org.httpunit:httpunit')
    distributedTestImplementation('org.apache.tomcat:tomcat-jaspic-api:' + DependencyConstraints.get('tomcat8.version'))
    distributedTestImplementation('org.springframework:spring-core')
    compile(project(':geode-core'))
    compile(project(':extensions:geode-modules')) {
      exclude group: 'org.apache.tomcat'
    }
    testImplementation(project(':extensions:geode-modules')) {
      exclude group: 'org.apache.tomcat'
    }


    implementation('org.apache.tomcat:tomcat-catalina:' + DependencyConstraints.get('tomcat8.version')) {
        exclude module: 'tomcat-annotations-api'
        exclude module: 'tomcat-servlet-api'
    }
    implementation('org.apache.tomcat:tomcat-coyote:' + DependencyConstraints.get('tomcat8.version')) {
        exclude module: 'tomcat-servlet-api'
    }
    implementation('org.apache.tomcat:tomcat-juli:' + DependencyConstraints.get('tomcat8.version'))
    implementation('javax.servlet:javax.servlet-api')

    integrationTestImplementation(project(':geode-dunit')) {
        exclude module: 'geode-core'
    }
    integrationTestImplementation(project(':geode-junit')) {
        exclude module: 'geode-core'
    }
    integrationTestImplementation(project(':extensions:geode-modules-test'))
    integrationTestRuntimeOnly('xerces:xercesImpl')
    integrationTestRuntimeOnly('javax.annotation:javax.annotation-api')

    distributedTestImplementation(project(':geode-dunit')) {
        exclude module: 'geode-core'
    }

    distributedTestImplementation(project(':geode-junit')) {
        exclude module: 'geode-core'
    }
    distributedTestImplementation(project(':extensions:geode-modules-test'))

    distributedTestRuntimeOnly('xerces:xercesImpl')
    distributedTestRuntimeOnly('javax.annotation:javax.annotation-api')
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.path.contains('geode-modules/build') }
    }
}

