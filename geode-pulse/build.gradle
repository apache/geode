/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'war'

dependencies {
  compile('org.springframework:spring-beans:' + project.'springframework.version')

  // Needed to fully use log4j instead of commons-logging.
  compile('org.apache.logging.log4j:log4j-jcl:' + project.'log4j.version')
  compile('org.apache.logging.log4j:log4j-api:' + project.'log4j.version')
  compile('org.apache.logging.log4j:log4j-core:' + project.'log4j.version')

  compile('commons-beanutils:commons-beanutils:' + project.'commons-beanutils.version')
  compile('commons-collections:commons-collections:' + project.'commons-collections.version')
  compile('commons-digester:commons-digester:' + project.'commons-digester.version')
  compile('commons-lang:commons-lang:' + project.'commons-lang.version')
  compile('org.springframework.ldap:spring-ldap-core:' + project.'spring-ldap-core.version')
  runtimeOnly('org.springframework:spring-expression:' + project.'springframework.version')

  // added only to ensure common version with other geode modules
  runtimeOnly('org.slf4j:slf4j-api:' + project.'slf4j-api.version')

  compile('org.springframework.security:spring-security-config:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-expression'
  }
  compile('org.springframework.security:spring-security-ldap:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-asm'
    exclude module: 'spring-expression'
    exclude module: 'spring-jdbc'
  }
  compile('org.springframework.security:spring-security-web:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-asm'
    exclude module: 'spring-expression'
    exclude module: 'spring-jdbc'
  }
  compile('org.springframework:spring-context:' + project.'springframework.version');
  compile('org.springframework:spring-web:' + project.'springframework.version');
  runtimeOnly('org.springframework:spring-webmvc:' + project.'springframework.version') {
    exclude module: 'aopalliance'
    exclude module: 'aspectjweaver'
  }
  compile('org.springframework:spring-tx:' + project.'spring-tx.version')
  compile('com.fasterxml.jackson.core:jackson-annotations:' + project.'jackson.version')
  compile('com.fasterxml.jackson.core:jackson-core:' + project.'jackson.version')
  compile('com.fasterxml.jackson.core:jackson-databind:' + project.'jackson.version')

  providedCompile('commons-logging:commons-logging:' + project.'commons-logging.version')

  compileOnly('org.mortbay.jetty:servlet-api:' + project.'mortbay-jetty-servlet-api.version')


  testCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  testCompile(project(':geode-core'))
  testCompile('org.springframework:spring-test:' + project.'springframework.version')


  integrationTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  integrationTestCompile(project(':geode-core'))
  integrationTestCompile(project(':geode-pulse:geode-pulse-test'))
  integrationTestCompile('org.springframework:spring-test:' + project.'springframework.version')


  uiTestCompile(project(':geode-junit')) {
    exclude module: 'geode-core'
  }
  uiTestCompile(project(':geode-json'))
  uiTestCompile(project(':geode-pulse:geode-pulse-test'))
  uiTestCompile('org.seleniumhq.selenium:selenium-remote-driver:' + project.'selenium.version')

  uiTestRuntime(project(':geode-core'))
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'copyGemFireVersionFile')
  }

  integrationTest {
    resources {
      srcDir 'src/main/webapp/WEB-INF'
    }
  }
}

task copyGemFireVersionFile(type: Copy) {
  from project(':geode-core').createVersionPropertiesFile
  into generatedResources
}

eclipse.classpath.file {
  whenMerged { classpath ->
    classpath.entries.removeAll { entry -> entry.path.contains('geode-core/build')}
  }
}
idea.module.iml {
  whenMerged {module ->
    module.dependencies.removeAll { entry -> entry.toString().contains('geode-core/build')}
  }
}

artifacts {
  archives war
}

war {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  classpath configurations.runtimeClasspath
  classpath project(':geode-core').webJar.archivePath
}
war.dependsOn(':geode-core:webJar')
uiTest.dependsOn war
uiTest.finalizedBy rootProject.combineReports
rootProject.combineReports.mustRunAfter uiTest

