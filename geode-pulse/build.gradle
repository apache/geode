/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'war'

sourceSets {
  main {
    resources {
      exclude('**/gemfire*.properties')
      exclude('**/sqlfire.properties')
    }
  }
}

dependencies {
  compile 'org.springframework:spring-beans:' + project.'springframework.version'
  
  compile 'commons-beanutils:commons-beanutils:' + project.'commons-beanutils.version'
  compile 'commons-collections:commons-collections:' + project.'commons-collections.version'
  compile 'commons-digester:commons-digester:' + project.'commons-digester.version'
  compile 'commons-lang:commons-lang:' + project.'commons-lang.version'
  compile 'org.springframework.ldap:spring-ldap-core:' + project.'spring-ldap-core.version'
  runtime 'org.springframework:spring-expression:' + project.'springframework.version'
  compile ('org.springframework.security:spring-security-config:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-expression'
  }
  compile ('org.springframework.security:spring-security-ldap:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-asm'
    exclude module: 'spring-expression'
    exclude module: 'spring-jdbc'
  }
  compile ('org.springframework.security:spring-security-web:' + project.'spring-security.version') {
    exclude module: 'aopalliance'
    exclude module: 'spring-asm'
    exclude module: 'spring-expression'
    exclude module: 'spring-jdbc'
  }
  runtime ('org.springframework:spring-webmvc:' + project.'springframework.version') {
    exclude module: 'aopalliance'
    exclude module: 'aspectjweaver'
  }
  compile 'org.springframework:spring-tx:' + project.'spring-tx.version'
  compile 'com.fasterxml.jackson.core:jackson-annotations:' + project.'jackson.version'
  compile 'com.fasterxml.jackson.core:jackson-core:' + project.'jackson.version'
  compile 'com.fasterxml.jackson.core:jackson-databind:' + project.'jackson.version'

  providedCompile 'commons-logging:commons-logging:' + project.'commons-logging.version'

  provided 'org.mortbay.jetty:servlet-api:' + project.'mortbay-jetty-servlet-api.version'
  provided 'com.google.guava:guava:' + project.'guava.version'

  testCompile project(':geode-junit')
  testCompile project(':geode-core')
  testCompile files(project(':geode-core').sourceSets.test.output)

  testCompile(group: 'com.codeborne', name: 'phantomjsdriver', version: project.'phantomjsdriver.version') {
      exclude module: 'selenium-remote-driver' //by artifact name
      exclude module: 'selenium-java' //by artifact name
  }

  testCompile 'org.seleniumhq.selenium:selenium-api:' + project.'selenium.version'
  testCompile 'org.seleniumhq.selenium:selenium-remote-driver:' + project.'selenium.version'
  testCompile 'org.seleniumhq.selenium:selenium-support:' + project.'selenium.version'
  testCompile 'org.springframework:spring-test:' + project.'springframework.version'
  testCompile 'org.powermock:powermock-core:' + project.'powermock.version'
  testCompile 'org.powermock:powermock-module-junit4:' + project.'powermock.version'
  testCompile 'org.powermock:powermock-api-mockito:' + project.'powermock.version'

  testRuntime 'com.google.code.gson:gson:' + project.'google-gson.version'
  testRuntime 'org.apache.commons:commons-exec:' + project.'commons-exec.version'
  testRuntime 'com.jayway.jsonpath:json-path:' + project.'json-path.version'
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'copyGemFireVersionFile')
  }

  test {
    resources {
      srcDir 'src/main/webapp/WEB-INF'
    }
  }
}

task copyGemFireVersionFile(type: Copy) {
  from project(':geode-core').createVersionPropertiesFile
  into generatedResources
}

eclipse.classpath.file {
  whenMerged { classpath ->
    classpath.entries.removeAll { entry -> entry.path.contains('geode-core/build')}
  }
}
idea.module.iml {
  whenMerged {module ->
    module.dependencies.removeAll { entry -> entry.toString().contains('geode-core/build')}
  }
}

artifacts {
  archives war
}

war {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  classpath configurations.runtime
  classpath project(':geode-core').webJar.archivePath
}

uiTest.dependsOn war
