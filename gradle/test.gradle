import org.apache.geode.gradle.TestPropertiesWriter
import org.apache.geode.gradle.RepeatTest

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

task combineReports(type: TestReport) {
  description 'Combines the test reports.'
  destinationDir = file "${rootProject.buildDir}/reports/combined"

  doLast {
    println "All test reports at ${rootProject.buildDir}/reports/combined"
  }
}

gradle.taskGraph.whenReady({ graph ->
  tasks.getByName('combineReports').reportOn rootProject.subprojects.collect {
    it.tasks.withType(Test)
  }.flatten()
})


subprojects {
  // This configuration might be safely removed once the CategoryWithParameterizedRunnerFactory
  // and associated classes are themselves removed, per GEODE-5606
  configurations {
    apt
  }

  compileTestJava {
    options.annotationProcessorPath = files(configurations['apt'])
  }

  test {
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    if (project.hasProperty('testMaxParallelForks')) {
      maxParallelForks = Integer.parseUnsignedInt(project.testMaxParallelForks)
    } else {
      maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
  }

  apply plugin: 'nebula.facet'
  facets {
    integrationTest {
      testTaskName = 'integrationTest'
      includeInCheckLifecycle = false
    }
    distributedTest {
      testTaskName = 'distributedTest'
      includeInCheckLifecycle = false
    }
    performanceTest {
      testTaskName = 'performanceTest'
      includeInCheckLifecycle = false
    }
    acceptanceTest {
      testTaskName = 'acceptanceTest'
      includeInCheckLifecycle = false
    }
    uiTest {
      testTaskName = 'uiTest'
      includeInCheckLifecycle = false
    }
    upgradeTest {
      testTaskName = 'upgradeTest'
      includeInCheckLifecycle = false
    }
  }

  configurations {
    testAnnotationProcessor.extendsFrom annotationProcessor
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
    distributedTestAnnotationProcessor.extendsFrom annotationProcessor
    performanceTestAnnotationProcessor.extendsFrom annotationProcessor
    acceptanceTestAnnotationProcessor.extendsFrom annotationProcessor
    uiTestAnnotationProcessor.extendsFrom annotationProcessor
    upgradeTestAnnotationProcessor.extendsFrom annotationProcessor
    // Facets does not extend the new runtimeOnly configurations
    integrationTestRuntimeOnly.extendsFrom(runtimeOnly)
    distributedTestRuntimeOnly.extendsFrom(runtimeOnly)
    performanceTestRuntimeOnly.extendsFrom(runtimeOnly)
    acceptanceTestRuntimeOnly.extendsFrom(runtimeOnly)
    uiTestRuntimeOnly.extendsFrom(runtimeOnly)
    upgradeTestRuntimeOnly.extendsFrom(runtimeOnly)
  }

  dependencies {
    apt files("${rootProject.projectDir}/buildSrc/build/libs/buildSrc.jar")
    apt(group: 'junit', name: 'junit', version: project.'junit.version') {
      transitive = false
    }
    // Because EnsureCorrectRunsWithProcessor needs access to
    // CategoryWithParameterizedRunnerFactory.
    // buildSrc uses version 1.3.0, so we use it here instead of the local geode-junit project
    apt(group: 'org.apache.geode', name: 'geode-junit', version: '1.3.0') {
      transitive = false
    }

    testCompile('com.github.stefanbirkner:system-rules:' + project.'system-rules.version') {
      exclude module: 'junit-dep'
    }
    testCompile 'com.google.code.tempus-fugit:tempus-fugit:' + project.'tempus-fugit.version'
    testCompile 'org.awaitility:awaitility:' + project.'awaitility.version'
    testCompile 'edu.umd.cs.mtc:multithreadedtc:' + project.'multithreadedtc.version'
    testCompile 'junit:junit:' + project.'junit.version'
    testCompile 'org.assertj:assertj-core:' + project.'assertj-core.version'
    testCompile 'org.hamcrest:hamcrest-all:' + project.'hamcrest-all.version'

    testCompile 'org.mockito:mockito-core:' + project.'mockito-core.version'
    testCompile 'org.powermock:powermock-core:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-module-junit4:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-api-mockito2:' + project.'powermock.version'

    testCompile 'pl.pragmatists:JUnitParams:' + project.'JUnitParams.version'

    testRuntime('cglib:cglib:' + project.'cglib.version') {
      exclude module: 'org.apache.ant'
    }

    integrationTestCompile 'org.mockito:mockito-core:' + project.'mockito-core.version'

    integrationTestCompile 'org.powermock:powermock-core:' + project.'powermock.version'
    integrationTestCompile 'org.powermock:powermock-module-junit4:' + project.'powermock.version'
    integrationTestCompile 'org.powermock:powermock-api-mockito2:' + project.'powermock.version'

    distributedTestCompile project(":geode-dunit")
  }

  configure([integrationTest, distributedTest, performanceTest, acceptanceTest, uiTest,
             upgradeTest]) {
    forkEvery 1

    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    outputs.upToDateWhen { false }
  }

  configure([integrationTest, distributedTest, performanceTest]) {
    useJUnit {
      if (project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
    }
  }

  if (project.hasProperty("forceTest")) {
    // All test facets already force rerun.  Only :test can be upToDate.
    test {
      outputs.upToDateWhen { false }
    }
  }

  task repeatDistributedTest(type: RepeatTest) {
    classpath = project.sourceSets.distributedTest.runtimeClasspath
    testClassesDirs = project.sourceSets.distributedTest.output.classesDirs
  }

  task repeatIntegrationTest(type: RepeatTest) {
    classpath = project.sourceSets.integrationTest.runtimeClasspath
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
  }

  task repeatAcceptanceTest(type: RepeatTest) {
    classpath = project.sourceSets.acceptanceTest.runtimeClasspath
    testClassesDirs = project.sourceSets.acceptanceTest.output.classesDirs
  }

  task repeatUpgradeTest(type: RepeatTest) {
    classpath = project.sourceSets.upgradeTest.runtimeClasspath
    testClassesDirs = project.sourceSets.upgradeTest.output.classesDirs
  }

  task repeatUnitTest(type: RepeatTest) {
    // default classpath works for this one.
  }

  configure([repeatDistributedTest, repeatIntegrationTest, repeatUpgradeTest, repeatUnitTest, repeatAcceptanceTest]) {
    times = Integer.parseInt(repeat)
    useJUnit {}
    outputs.upToDateWhen { false }

    if (project.hasProperty("failOnNoMatchingTests")) {
      filter {
        setFailOnNoMatchingTests(Boolean.valueOf(project.failOnNoMatchingTests))
      }
    }
  }

  // apply common test configuration
  gradle.taskGraph.whenReady({ graph ->
    tasks.withType(Test).each { test ->
      check.dependsOn test
      test.configure {
        onlyIf { !Boolean.getBoolean('skip.tests') }

        def resultsDir = TestPropertiesWriter.testResultsDir(buildDir, test.name)
        test.workingDir = resultsDir

        reports.html.destination = file "$buildDir/reports/$name"
        testLogging {
          exceptionFormat = 'full'
        }

        maxHeapSize '768m'
        jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError', '-ea']
        if (project.hasProperty('testJVMVer') &&  testJVMVer.toInteger() >= 9) {
          jvmArgs += ["--add-opens", "java.xml/jdk.xml.internal=ALL-UNNAMED"]
          jvmArgs += ["--add-opens", "java.base/jdk.internal.module=ALL-UNNAMED"]
          jvmArgs += ["--add-opens", "java.base/java.lang.module=ALL-UNNAMED"]
        }
        if (project.hasProperty('testJVM') && !testJVM.trim().isEmpty()) {
          executable = "${testJVM}/bin/java"
        }

        systemProperty 'gemfire.DEFAULT_MAX_OPLOG_SIZE', '10'
        systemProperty 'gemfire.disallowMcastDefaults', 'true'
        systemProperty 'jline.terminal', 'jline.UnsupportedTerminal'
        def logLevel = System.getProperty('log-level')
        if (logLevel != null) {
          systemProperty 'log-level', logLevel
        }
        def log4jLocation = System.getProperty('log4j.configurationFile')
        if (log4jLocation != null) {
          systemProperty 'log4j.configurationFile', log4jLocation
        }

        // The distributed tests seem to need to use /tmp directly,
        // so exclude them from using the supplied temp directory.
        if (!test.name.contains("distributed")) {
          systemProperty 'java.io.tmpdir', System.getProperty('java.io.tmpdir')
        }

        def eol = System.getProperty('line.separator')
        def progress = new File(resultsDir, "$test.name-progress.txt")
        beforeTest { desc ->
          def now = new Date().format('yyyy-MM-dd HH:mm:ss.SSS Z')
          progress << "$now Starting test $desc.className $desc.name$eol"
        }
        afterTest { desc, result ->
          def now = new Date().format('yyyy-MM-dd HH:mm:ss.SSS Z')
          progress << "$now Completed test $desc.className $desc.name with result: ${result.resultType}$eol"
        }

        doFirst {
          resultsDir.deleteDir()
          resultsDir.mkdirs()
        }
      }
    }
  })

  // Make precheckin task run all validation tests for checking in code.
  task precheckin(dependsOn: [build, acceptanceTest, integrationTest, distributedTest, upgradeTest]) {
    description 'Run this task before checking in code to validate changes. It runs tests beyond unitTest'
  }

  tasks.withType(Test).plus([build,check]).each {
    it.finalizedBy combineReports
    combineReports.mustRunAfter it
  }
}

classes.dependsOn subprojects.compileTestJava
classes.dependsOn subprojects.compileIntegrationTestJava
classes.dependsOn subprojects.compileDistributedTestJava
classes.dependsOn subprojects.compileAcceptanceTestJava
classes.dependsOn subprojects.compileUiTestJava
classes.dependsOn subprojects.compilePerformanceTestJava
classes.dependsOn subprojects.compileUpgradeTestJava

