import org.apache.geode.gradle.TestPropertiesWriter
import org.apache.geode.gradle.RepeatTest

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

task combineReports(type: TestReport) {
  description 'Combines the test reports.'
  destinationDir = file "${rootProject.buildDir}/reports/combined"

  doLast {
    println "All test reports at ${rootProject.buildDir}/reports/combined"
  }
}

gradle.taskGraph.whenReady({ graph ->
  tasks.getByName('combineReports').reportOn rootProject.subprojects.collect{ it.tasks.withType(Test) }.flatten()
})


subprojects {
  dependencies {
    testCompile ('com.github.stefanbirkner:system-rules:' + project.'system-rules.version') {
      exclude module: 'junit-dep'
    }
    testCompile 'com.google.code.tempus-fugit:tempus-fugit:' + project.'tempus-fugit.version'
    testCompile 'org.awaitility:awaitility:' + project.'awaitility.version'
    testCompile 'edu.umd.cs.mtc:multithreadedtc:' + project.'multithreadedtc.version'
    testCompile 'eu.codearte.catch-exception:catch-exception:' + project.'catch-exception.version'
    testCompile 'eu.codearte.catch-exception:catch-throwable:' + project.'catch-throwable.version'
    testCompile 'junit:junit:' + project.'junit.version'
    testCompile 'org.assertj:assertj-core:' + project.'assertj-core.version'
    testCompile 'org.hamcrest:hamcrest-all:' + project.'hamcrest-all.version'
    testCompile 'org.jmock:jmock-junit4:' + project.'jmock.version'
    testCompile 'org.jmock:jmock-legacy:' + project.'jmock.version'

    testCompile 'org.mockito:mockito-core:' + project.'mockito-core.version'
    testCompile 'org.powermock:powermock-core:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-module-junit4:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-api-mockito2:' + project.'powermock.version'

    testCompile 'pl.pragmatists:JUnitParams:' + project.'JUnitParams.version'

    testRuntime 'cglib:cglib:' + project.'cglib.version'
  }

  configurations {
    apt
  }

  dependencies {
    apt files("${rootProject.projectDir}/buildSrc/build/libs/buildSrc.jar")
    apt(group: 'junit', name: 'junit', version: project.'junit.version') {
      transitive = false
    }
    // Because EnsureCorrectRunsWithProcessor needs access to
    // CategoryWithParameterizedRunnerFactory. The specific version of geode-junit is not important.
    apt(group: 'org.apache.geode', name: 'geode-junit', version: '1.3.0') {
      transitive = false
    }
  }

  compileTestJava {
    options.annotationProcessorPath = files(configurations['apt'])
  }

  test {
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
  }

  apply plugin: 'nebula.facet'
  facets {
    integrationTest {
      parentSourceSet = 'test'
      testTaskName = 'integrationTest'
      includeInCheckLifecycle = false
    }
    distributedTest {
      parentSourceSet = 'test'
      testTaskName = 'distributedTest'
      includeInCheckLifecycle = false
    }
    performanceTest {
      parentSourceSet = 'test'
      testTaskName = 'performanceTest'
      includeInCheckLifecycle = false
    }
    acceptanceTest {
      parentSourceSet = 'test'
      testTaskName = 'acceptanceTest'
      includeInCheckLifecycle = false
    }
    uiTest {
      parentSourceSet = 'test'
      testTaskName = 'uiTest'
      includeInCheckLifecycle = false
    }
    upgradeTest {
      parentSourceSet = 'test'
      testTaskName = 'upgradeTest'
      includeInCheckLifecycle = false
    }
  }

  integrationTest {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }

    forkEvery 1

    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    outputs.upToDateWhen{false}
  }

  distributedTest {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }

    forkEvery 1
    outputs.upToDateWhen{false}
  }

  acceptanceTest {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
    }
    forkEvery 1
    outputs.upToDateWhen{false}
  }

  uiTest {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
    }
    forkEvery 1
    outputs.upToDateWhen{false}
  }

  upgradeTest {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
    }
    forkEvery 1
    outputs.upToDateWhen{false}
  }


  task repeatTest(type:RepeatTest) {
    times= Integer.parseInt(repeat)

    useJUnit {}

    outputs.upToDateWhen{false}

    classpath += project.sourceSets.distributedTest.runtimeClasspath
    testClassesDirs += project.sourceSets.distributedTest.output.classesDirs
    classpath += project.sourceSets.integrationTest.runtimeClasspath
    testClassesDirs += project.sourceSets.integrationTest.output.classesDirs
  }

  task flakyTest(type:Test) {
    useJUnit {
      if(project.hasProperty("testCategory")) {
        includeCategories += project.testCategory
      }
      includeCategories += 'org.apache.geode.test.junit.categories.FlakyTest'
    }

    forkEvery 1
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }

    reports.junitXml.destination = file "$buildDir/test-reports-flaky"
    outputs.upToDateWhen{false}
  }

  /*
   * Don't add tasks for running specific category tests, instead use this
   * property `testCategory` and set a FQCN of the required category.
   * Eg: ./gradlew :geode-core:distributedTest -PtestCategory=org.apache.geode.test.junit.categories.GfshTest
   *
   * This provides developers a way to choose specific test source and test category.
   *
  */


  // By proving a file with an arbitrary list of test classes, we can select only those
  // tests to run. Activated using -Dcustom.tests=<file> customTest
  def customTestList = []
  def customTestFile = System.getProperty('custom.tests')
  if (customTestFile != null) {
    new File(customTestFile).eachLine { customTestList << it }
  }

  task customTest(type:Test) {
    include { x ->
      (x.isDirectory() || customTestList.any { y -> x.getName().contains(y) } ) ? true : false
    }

    forkEvery 30
  }

  // apply common test configuration
  gradle.taskGraph.whenReady( { graph ->
    tasks.withType(Test).each { test ->
      check.dependsOn test
      test.configure {
        onlyIf { ! Boolean.getBoolean('skip.tests') }

        def resultsDir = TestPropertiesWriter.testResultsDir(buildDir, test.name)
        test.workingDir = resultsDir

        reports.html.destination = file "$buildDir/reports/$name"
        testLogging {
          exceptionFormat = 'full'
        }

        maxHeapSize '768m'
//        jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError', '-ea',"-XX:+PrintGC", "-XX:+PrintGCDetails","-XX:+PrintGCTimeStamps"]
        jvmArgs = ['-XX:+HeapDumpOnOutOfMemoryError', '-ea']
        if(!testJVM.trim().isEmpty()) {
          executable="${testJVM}/bin/java"
        }

        systemProperty 'gemfire.DEFAULT_MAX_OPLOG_SIZE', '10'
        systemProperty 'gemfire.disallowMcastDefaults', 'true'
        systemProperty 'jline.terminal', 'jline.UnsupportedTerminal'
        def logLevel = System.getProperty('logLevel')
        if (logLevel != null) {
          systemProperty 'logLevel', logLevel
        }
        def log4jLocation = System.getProperty('log4j.configurationFile')
        if (log4jLocation != null) {
          systemProperty 'log4j.configurationFile', log4jLocation
        }

        // The distributed tests seem to need to use /tmp directly,
        // so exclude them from using the supplied temp directory.
        if (! test.name.contains("distributed")) {
          systemProperty 'java.io.tmpdir', System.getProperty('java.io.tmpdir')
        }

        def eol = System.getProperty('line.separator')
        def progress = new File(resultsDir, "$test.name-progress.txt")
        beforeTest { desc ->
          def now = new Date().format('yyyy-MM-dd HH:mm:ss.SSS Z')
          progress << "$now Starting test $desc.className $desc.name$eol"
        }
        afterTest { desc, result ->
          def now = new Date().format('yyyy-MM-dd HH:mm:ss.SSS Z')
          progress << "$now Completed test $desc.className $desc.name with result: ${result.resultType}$eol"
          logger.quiet("Test: ${desc.className}.${desc.name}: ${result.resultType}")
        }

        doFirst {
          resultsDir.deleteDir()
          resultsDir.mkdirs()
        }
      }
    }
  })

  // Make precheckin task run all validation tests for checking in code.
  task precheckin (dependsOn: [ build, ":geode-assembly:acceptanceTest", integrationTest, distributedTest, flakyTest ]) {
    description 'Run this task before checking in code to validate changes. This task combines the following tasks: build, integrationTest, distributedTest, and flakyTest'
  }

  combineReports.mustRunAfter check, test, integrationTest, distributedTest, flakyTest, acceptanceTest, repeatTest, upgradeTest
  [build, check, test, integrationTest, distributedTest, flakyTest, acceptanceTest, repeatTest, upgradeTest].each {it.finalizedBy combineReports}
}

classes.dependsOn subprojects.compileIntegrationTestJava
classes.dependsOn subprojects.compileDistributedTestJava
classes.dependsOn subprojects.compileAcceptanceTestJava
classes.dependsOn subprojects.compileUiTestJava
classes.dependsOn subprojects.compilePerformanceTestJava
classes.dependsOn subprojects.compileUpgradeTestJava

