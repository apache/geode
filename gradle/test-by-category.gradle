import org.apache.geode.gradle.TestPropertiesWriter

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


subprojects {
  dependencies {
    testCompile('com.github.stefanbirkner:system-rules:' + project.'system-rules.version') {
      exclude module: 'junit-dep'
    }
    testCompile 'com.google.code.tempus-fugit:tempus-fugit:' + project.'tempus-fugit.version'
    testCompile 'org.awaitility:awaitility:' + project.'awaitility.version'
    testCompile 'edu.umd.cs.mtc:multithreadedtc:' + project.'multithreadedtc.version'
    testCompile 'eu.codearte.catch-exception:catch-exception:' + project.'catch-exception.version'
    testCompile 'eu.codearte.catch-exception:catch-throwable:' + project.'catch-throwable.version'
    testCompile 'junit:junit:' + project.'junit.version'
    testCompile 'org.assertj:assertj-core:' + project.'assertj-core.version'
    testCompile 'org.hamcrest:hamcrest-all:' + project.'hamcrest-all.version'
    testCompile 'org.jmock:jmock-junit4:' + project.'jmock.version'
    testCompile 'org.jmock:jmock-legacy:' + project.'jmock.version'

    testCompile 'org.mockito:mockito-core:' + project.'mockito-core.version'
    testCompile 'org.powermock:powermock-core:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-module-junit4:' + project.'powermock.version'
    testCompile 'org.powermock:powermock-api-mockito2:' + project.'powermock.version'

    testCompile 'pl.pragmatists:JUnitParams:' + project.'JUnitParams.version'

    testRuntime 'cglib:cglib:' + project.'cglib.version'
  }

  configurations {
    apt
  }

  dependencies {
    apt files("${rootProject.projectDir}/buildSrc/build/libs/buildSrc.jar")
    apt(group: 'junit', name: 'junit', version: project.'junit.version') {
      transitive = false
    }
    // Because EnsureCorrectRunsWithProcessor needs access to
    // CategoryWithParameterizedRunnerFactory. The specific version of geode-junit is not important.
    apt(group: 'org.apache.geode', name: 'geode-junit', version: '1.3.0') {
      transitive = false
    }
  }

  compileTestJava {
    options.annotationProcessorPath = files(configurations['apt'])
  }

  test {
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
  }

  task securityTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.SecurityTest'
    }

    forkEvery 1
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }

    reports.junitXml.destination = file "$buildDir/test-reports-security"
  }

  task clientServerTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.ClientServerTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-security"
  }

  task dlockTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.DLockTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-dlock"
  }

  task backwardCompatibilityTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.BackwardCompatibilityTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-backwardcompatibility"
  }

  task clientSubscriptionTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.ClientSubscriptionTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-client-subscription"
  }
  task queryTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.OQLQueryTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-oql-query"
  }

  task indexTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.OQLIndexTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-oql-index"
  }

  task functionServiceTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.FunctionServiceTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-function-service"
  }

  task membershipTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.MembershipTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-membership"
  }
  task luceneTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.LuceneTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-lucene"
  }

  task aeqTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.AEQTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-aeq"
  }


  task sessionTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.SessionTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-session"
  }

  task wanTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.WanTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-wan"
  }


  task redisTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.RedisTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    forkEvery 1
    reports.junitXml.destination = file "$buildDir/test-reports-redis"
  }

  task restAPITest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.RestAPITest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    forkEvery 1
    reports.junitXml.destination = file "$buildDir/test-reports-restAPI"
  }

  task serializationTest(type: Test) {
    useJUnit {
      includeCategories 'org.apache.geode.test.junit.categories.SerializationTest'
      excludeCategories 'org.apache.geode.test.junit.categories.FlakyTest'
    }
    doFirst {
      TestPropertiesWriter.writeTestProperties(buildDir, name)
    }
    reports.junitXml.destination = file "$buildDir/test-reports-serialization"
  }
}