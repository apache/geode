/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

task javadocJar(type: Jar) {
  from javadoc
  classifier = 'javadoc'
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      // use the (possibly empty) Jar tasks above for sources and javadoc
      artifact sourcesJar
      artifact javadocJar

      pom {
        name = 'Apache Geode'
        description = 'Apache Geode provides a database-like consistency model, reliable transaction processing and a shared-nothing architecture to maintain very low latency performance with high concurrency processing'
        url = 'http://geode.apache.org'

        scm {
          url = 'https://github.com/apache/geode'
          connection = 'scm:git:https://github.com:apache/geode.git'
          developerConnection = 'scm:git:https://github.com:apache/geode.git'
        }

        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        withXml {
          // This black magic checks to see if a dependency has the flag ext.optional=true
          // set on it, and if so marks the dependency as optional in the maven pom
          def depMap = project.configurations.compile.dependencies.collectEntries { [it.name, it] }
          def runtimeDeps = project.configurations.runtime.dependencies.collectEntries {
            [it.name, it]
          }
          def runtimeOnlyDeps = project.configurations.runtimeOnly.dependencies.collectEntries {
            [it.name, it]
          }
          depMap.putAll(runtimeDeps)
          depMap.putAll(runtimeOnlyDeps)
          asNode().dependencies.dependency.findAll {
            def dep = depMap.get(it.artifactId.text())
            return dep?.hasProperty('optional') && dep.optional
          }.each {
            if (it.optional) {
              it.optional.value = 'true'
            } else {
              it.appendNode('optional', 'true')
            }
          }
        }

        withXml {
          def elem = asElement()
          def hdr = elem.ownerDocument().createComment(
              '''
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ''')
          elem.insertBefore(hdr, elem.firstChild)
        }
      }
    }
  }
  repositories {
    maven {
      // Use specified mavenRepository if provided, else use release or snapshot defaults.
      url = project.findProperty("mavenRepository") ?:
          project.isReleaseVersion ? project.mavenReleaseUrl : project.mavenSnapshotUrl
      if (url.toString().startsWith("http") || url.toString().startsWith("sftp")) {
        // Username / password credentials are only supported for http, https, and sftp repos.
        // See the Gradle documentation on Repository Types for more information.
        credentials {
          username project.findProperty("mavenUsername")
          password project.findProperty("mavenPassword")
        }
      }
    }
  }
}

signing {
  required({project.isReleaseVersion && project.hasProperty('signing.keyId') && project.hasProperty('signing.secretKeyRingFile')})
  sign publishing.publications.maven
}

task install(dependsOn: publishToMavenLocal) {}

task('checkPom') {
  dependsOn('generatePomFileForMavenPublication')
  description 'Checks the generated POM against an expected POM for dependency changes.'

  doLast {
    if (tasks.getByName("generatePomFileForMavenPublication").enabled) {
      def expectedPomFile = sourceSets.test.resources.getSourceDirectories().first().toURI().resolve("expected-pom.xml")
      if (null == expectedPomFile) {
        throw new RuntimeException("expected-pom.xml not found.")
      }
      def expectedPom = new XmlParser().parse(expectedPomFile.toString())
      def expectedDependencies = new TreeSet()
      expectedPom.dependencies.dependency.each() {
        def dep = it as String
        if (dep.contains("org.apache.geode")) {
          // since the project version is the source of truth, use that for comparison instead of
          // whatever is stored in the expected pom file
          dep = dep.replaceFirst("(.*\\[)(\\d+.\\d+.\\d+(-SNAPSHOT)?)(\\].*)", '$1' + version + '$4')
        }
        expectedDependencies.add(dep)
      }

      def actualPomFile = generatePomFileForMavenPublication.outputs.files.first()
      def actualPom = new XmlParser().parse(actualPomFile)
      def actualDependencies = new TreeSet()
      actualPom.dependencies.dependency.each() {
        actualDependencies.add(it as String)
      }

      if (actualDependencies != expectedDependencies) {
        def newDependencies = new TreeSet(actualDependencies)
        newDependencies.removeAll(expectedDependencies)
        def removedDependencies = new TreeSet(expectedDependencies)
        removedDependencies.removeAll(actualDependencies)

        def message =
            "The ".concat(project.name).concat(" pom-default.xml has changed. Verify dependencies.")
                .concat("\nWhen changes have been approved, copy :\n")
                .concat(" cp ").concat(actualPomFile as String)
                .concat(" ").concat(expectedPomFile as String)
                .concat("\nRemoved Dependencies\n--------------\n")
                .concat(String.join("\n", removedDependencies.each { dep -> dep.toString() }))
                .concat("\n\nNew Dependencies\n--------------\n")
                .concat(String.join("\n", newDependencies.each { dep -> dep.toString() }))
                .concat("\n\n")


        throw new RuntimeException(message)
      }
    }
  }
}
check.dependsOn('checkPom')

task updateExpectedPom(dependsOn: generatePomFileForMavenPublication, type: Copy) {
  description 'After having verified changes with checkPom, this task will perform the copy.'

  def expectedPomDir = sourceSets.test.resources.getSourceDirectories().first().toURI()
  def actualPomFile = generatePomFileForMavenPublication.outputs.files.first()
  if (tasks.getByName("generatePomFileForMavenPublication").enabled) {
    from actualPomFile
    into expectedPomDir
    rename '.*.xml', "expected-pom.xml"
  }
}
checkPom.mustRunAfter(updateExpectedPom)
