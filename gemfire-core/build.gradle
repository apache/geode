sourceSets {
  jca {
    compileClasspath += configurations.compile
    runtimeClasspath += configurations.runtime
  }
}

configurations {
  //declaring new configuration that will be used to associate with artifacts
  archives
}

dependencies {
   // Source Dependencies
  // External 
  provided files("${System.getProperty('java.home')}/../lib/tools.jar")
  compile 'antlr:antlr:' + project.'antlr.version'
  compile 'com.fasterxml.jackson.core:jackson-annotations:' + project.'jackson.version'
  compile 'com.fasterxml.jackson.core:jackson-core:' + project.'jackson.version'
  compile 'com.fasterxml.jackson.core:jackson-databind:' + project.'jackson.version'
  compile 'com.google.code.findbugs:annotations:' + project.'annotations.version'
  provided 'com.google.guava:guava:' + project.'guava.version'
  compile 'commons-io:commons-io:' + project.'commons-io.version'
  provided 'commons-lang:commons-lang:' + project.'commons-lang.version'
  compile 'commons-logging:commons-logging:' + project.'commons-logging.version'
  compile 'commons-modeler:commons-modeler:' + project.'commons-modeler.version'
  compile 'io.netty:netty-all:' + project.'netty-all.version'
  compile 'it.unimi.dsi:fastutil:' + project.'fastutil.version'
  compile 'javax.activation:activation:' + project.'activation.version'
  compile 'javax.mail:javax.mail-api:' + project.'javax.mail-api.version'
  compile 'javax.resource:javax.resource-api:' + project.'javax.resource-api.version'
  compile 'javax.servlet:javax.servlet-api:' + project.'javax.servlet-api.version'
  compile 'javax.transaction:javax.transaction-api:' + project.'javax.transaction-api.version'
  compile 'mx4j:mx4j:' + project.'mx4j.version'
  compile 'mx4j:mx4j-remote:' + project.'mx4j.version'
  compile 'mx4j:mx4j-tools:' + project.'mx4j.version'
  compile 'net.java.dev.jna:jna:' + project.'jna.version'
  compile 'jline:jline:' + project.'jline.version'
  provided 'org.apache.hadoop:hadoop-common:' + project.'hadoop.version'
  provided 'org.apache.hadoop:hadoop-annotations:' + project.'hadoop.version'
  provided 'org.apache.hadoop:hadoop-hdfs:' + project.'hadoop.version'
  provided 'org.apache.hadoop:hadoop-mapreduce-client-core:' + project.'hadoop.version'
  compile 'org.apache.hbase:hbase:' + project.'hbase.version'
  compile 'org.apache.logging.log4j:log4j-api:' + project.'log4j.version'
  compile 'org.apache.logging.log4j:log4j-core:' + project.'log4j.version'
  runtime 'org.apache.logging.log4j:log4j-slf4j-impl:' + project.'log4j.version'
  runtime 'org.apache.logging.log4j:log4j-jcl:' + project.'log4j.version'
  runtime 'org.apache.logging.log4j:log4j-jul:' + project.'log4j.version'
  compile 'org.apache.lucene:lucene-analyzers-common:' + project.'lucene.version'
  compile 'org.apache.lucene:lucene-core:' + project.'lucene.version'
  compile 'org.apache.lucene:lucene-queries:' + project.'lucene.version'
  compile 'org.apache.lucene:lucene-queryparser:' + project.'lucene.version'
  compile 'org.eclipse.jetty:jetty-http:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-io:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-security:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-server:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-servlet:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-util:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-webapp:' + project.'jetty.version'
  compile 'org.eclipse.jetty:jetty-xml:' + project.'jetty.version'
  compile 'org.fusesource.jansi:jansi:' + project.'jansi.version'
  compile 'org.slf4j:slf4j-api:' + project.'slf4j-api.version'
  compile 'org.springframework.data:spring-data-commons:' + project.'spring-data-commons.version'
  provided 'org.springframework.data:spring-data-gemfire:' + project.'spring-data-gemfire.version'
  compile 'org.springframework:spring-tx:' + project.'springframework.version'
  compile 'org.springframework.shell:spring-shell:' + project.'spring-shell.version'
  compile 'org.xerial.snappy:snappy-java:' + project.'snappy-java.version'
  compile 'org.apache.hbase:hbase:' + project.'hbase.version'
 
  compile project(':gemfire-common')
  compile project(':gemfire-jgroups')
  compile project(':gemfire-joptsimple')
  compile project(':gemfire-json')
  
  jcaCompile sourceSets.main.output

  provided project(path: ':gemfire-junit', configuration: 'testOutput')

  // Test Dependencies
  // External
  testCompile 'org.apache.bcel:bcel:' + project.'bcel.version'
  testRuntime 'org.apache.derby:derby:' + project.'derby.version'
  testRuntime 'org.apache.hadoop:hadoop-auth:' + project.'hadoop.version'
  testRuntime 'commons-collections:commons-collections:' + project.'commons-collections.version'
  testRuntime 'commons-configuration:commons-configuration:' + project.'commons-configuration.version'
  testRuntime 'commons-io:commons-io:' + project.'commons-io.version'
  testCompile 'net.spy:spymemcached:' + project.'spymemcached.version'
  testCompile 'redis.clients:jedis:' + project.'jedis.version'
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'createVersionPropertiesFile')
  }
}
 
// Creates the version properties file and writes it to the classes dir
task createVersionPropertiesFile {
  def propertiesFile = file(generatedResources + "/com/gemstone/gemfire/internal/GemFireVersion.properties");
  outputs.file propertiesFile
  inputs.dir compileJava.destinationDir

  doLast {
    new ByteArrayOutputStream().withStream { gitWorkspaceStream ->
      def result = exec {
        workingDir = "${projectDir}"
        standardOutput = gitWorkspaceStream
        ignoreExitValue = true
        executable = "git"
        args = ['rev-parse', '--is-inside-work-tree']
      }
      ext.isGitWorkspace = gitWorkspaceStream.toString()
      ext.isGitWorkspace = ext.isGitWorkspace.trim()
    }

    if ( isGitWorkspace.equalsIgnoreCase('true') ) {
      new ByteArrayOutputStream().withStream { gitBranchStream ->
        def result = exec {
          workingDir = "${projectDir}"
          standardOutput = gitBranchStream
          executable = "git"
          args = ['rev-parse', '--abbrev-ref', 'HEAD']
        }
        ext.gitBranchString = gitBranchStream.toString()
        ext.gitBranch = ext.gitBranchString.trim()
      }

      new ByteArrayOutputStream().withStream { commitStream ->
        def result = exec {
          workingDir = "${projectDir}"
          standardOutput = commitStream
          executable = "git"
          args = ['rev-parse', 'HEAD']
        }
        ext.commitIdString = commitStream.toString()
        ext.commitId = ext.commitIdString.trim()
      }

      new ByteArrayOutputStream().withStream { sourceDateStream ->
        def result = exec {
          workingDir = "${projectDir}"
          standardOutput = sourceDateStream
          executable = "git"
          args = ['show', '-s', '--format=%ci', "${ext.commitId}"]
        }
        ext.sourceDateString = sourceDateStream.toString()
        ext.sourceDate = ext.sourceDateString.trim()
      }
    }
    else {
      // Not in SCM workspace, use default values
      ext.gitBranch = 'UNKNOWN'
      ext.commitId = 'UNKNOWN'
      ext.sourceDate = new Date().format('yyyy-MM-dd HH:mm:ss Z')
    }

    ext.osArch = System.getProperty('os.arch')
    ext.osName = System.getProperty('os.name')
    ext.osVersion = System.getProperty('os.version')
    ext.buildDate = new Date().format('yyyy-MM-dd HH:mm:ss Z')
    ext.buildNumber = new Date().format('MMddyy')
    ext.jdkVersion = System.getProperty('java.version')

    def props = [
      "Product-Name"      : "Apache Geode (incubating)",
      "Product-Version"   : version,
      "Build-Id"          : System.env.USER + ' ' + ext.buildNumber,
      "Build-Date"        : ext.buildDate,
      "Build-Platform"    : ext.osName + ' ' + ext.osVersion + ' ' + ext.osArch,
      "Build-Java-Version": ext.jdkVersion,
      "Source-Date"       : ext.sourceDate,
      "Source-Revision"   : ext.commitId,
      "Source-Repository" : ext.gitBranch
    ] as Properties

    propertiesFile.getParentFile().mkdirs();
    new FileOutputStream(propertiesFile).withStream { fos ->
      props.store(fos, '')
    }
  }
}

jar {

  from sourceSets.main.output
  from sourceSets.jca.output
  
  exclude 'com/gemstone/gemfire/management/internal/web/**'
  exclude 'com/gemstone/gemfire/internal/i18n/StringIdResourceBundle_ja.txt'
  exclude 'com/gemstone/gemfire/admin/doc-files/ds4_0.dtd'
}

task webJar (type: Jar, dependsOn: classes) {
  description 'Assembles the jar archive containing the gemfire management web classes.'
  from sourceSets.main.output
  baseName 'gemfire-web'
  include 'com/gemstone/gemfire/management/internal/web/**'
}

task raJar (type: Jar, dependsOn: classes) {
  description 'Assembles the jar archive that contains the JCA classes'
  from sourceSets.jca.output
  exclude 'com/gemstone/gemfire/ra/**'
  archiveName 'ra.jar'
}

task jcaJar (type: Jar, dependsOn: raJar) {
  description 'Assembles the jar archive that contains the JCA bundle'
  baseName 'gemfire-jca'
  extension 'rar'
  metaInf { from 'src/jca/ra.xml' }
  from raJar.archivePath
}

artifacts {
  archives webJar, raJar, jcaJar
}

configurations {
  classesOutput {
    extendsFrom compile
    description  'a dependency that exposes the compiled classes'
  }
}

dependencies {
  classesOutput sourceSets.main.output
}
