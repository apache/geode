#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
resource_types:
- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource
    tag: 3

resources:
- name: apachegeode-concourse
  type: concourse-pipeline
  source:
    target: https://concourse.apachegeode-ci.info
    insecure: "true"
    teams:
    - name: ((!concourse-team))
      username: ((!concourse-username))
      password: ((!concourse-password))
- name: geode-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/geode-build/*
    - ci/pipelines/shared/*
    - ci/pipelines/render.py
- name: geode-images-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/images/*
- name: geode-reaper-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/reaper.yml
- name: meta-mini-dockerfile
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/images/meta-mini/*
- name: meta-mini-image
  type: docker-image
  source:
    username: ((!docker-username))
    password: ((!docker-password))
    repository: gcr.io/apachegeode-ci/((!sanitized-geode-fork))-((!sanitized-geode-build-branch))-meta-img
{% if repository.sanitized_fork == "apache" %}
- name: geode-examples-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/examples/*
    - ci/pipelines/shared/*
    - ci/pipelines/render.py
- name: geode-pr-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/pull-request/*
    - ci/pipelines/shared/*
    - ci/pipelines/render.py
- name: geode-metrics-pipeline
  type: git
  source:
    uri: https://github.com/((!geode-fork))/geode.git
    branch: ((!geode-build-branch))
    paths:
    - ci/pipelines/metrics.yml
{% endif %}

jobs:
- name: set-images-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-images-pipeline
    trigger: true
  - task: deploy-images
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          username: ((!docker-username))
          password: ((!docker-password))
          tag: latest
          repository: gcr.io/apachegeode-ci/((!sanitized-geode-fork))-((!sanitized-geode-build-branch))-meta-img
      inputs:
      - name: geode-images-pipeline
      outputs:
      - name: results
      params:
        OUTPUT_DIRECTORY: results
        GEODE_BRANCH: ((!geode-build-branch))
        GEODE_FORK: ((!geode-fork))
        CONCOURSE_USERNAME: ((!concourse-username))
        CONCOURSE_PASSWORD: ((!concourse-password))
        PUBLIC_PIPELINES: ((!public-pipelines))
      run:
        path: geode-images-pipeline/ci/pipelines/images/deploy_images_pipeline.sh

- name: set-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-pipeline
    trigger: true
  - task: deploy-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          username: ((!docker-username))
          password: ((!docker-password))
          tag: latest
          repository: gcr.io/apachegeode-ci/((!sanitized-geode-fork))-((!sanitized-geode-build-branch))-meta-img
      inputs:
        - name: geode-pipeline
      outputs:
        - name: results
      params:
        OUTPUT_DIRECTORY: results
        GEODE_BRANCH: ((!geode-build-branch))
        GEODE_FORK: ((!geode-fork))
        CONCOURSE_USERNAME: ((!concourse-username))
        CONCOURSE_PASSWORD: ((!concourse-password))
      run:
        path: geode-pipeline/ci/pipelines/geode-build/deploy_pipeline.sh

{% if repository.sanitized_fork == "apache" %}
- name: set-examples-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-examples-pipeline
    trigger: true
  - task: deploy-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          username: ((!docker-username))
          password: ((!docker-password))
          tag: latest
          repository: gcr.io/apachegeode-ci/((!sanitized-geode-fork))-((!sanitized-geode-build-branch))-meta-img
      inputs:
        - name: geode-examples-pipeline
      outputs:
        - name: results
      params:
        OUTPUT_DIRECTORY: results
        GEODE_BRANCH: ((!geode-build-branch))
        GEODE_FORK: ((!geode-fork))
        CONCOURSE_USERNAME: ((!concourse-username))
        CONCOURSE_PASSWORD: ((!concourse-password))
      run:
        path: geode-examples-pipeline/ci/pipelines/examples/deploy_pipeline.sh

- name: set-pr-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-pr-pipeline
    trigger: true
  - task: deploy-pr
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          username: ((!docker-username))
          password: ((!docker-password))
          tag: latest
          repository: gcr.io/apachegeode-ci/((!sanitized-geode-fork))-((!sanitized-geode-build-branch))-meta-img
      inputs:
        - name: geode-pr-pipeline
      outputs:
        - name: results
      params:
        OUTPUT_DIRECTORY: results
        GEODE_BRANCH: ((!geode-build-branch))
        GEODE_FORK: ((!geode-fork))
        CONCOURSE_USERNAME: ((!concourse-username))
        CONCOURSE_PASSWORD: ((!concourse-password))
      run:
        path: geode-pr-pipeline/ci/pipelines/pull-request/deploy_pr_pipeline.sh

- name: set-metrics-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-metrics-pipeline
    trigger: true
  - put: apachegeode-concourse
    params:
      pipelines:
      - name: ((!pipeline-prefix))metrics
        team: ((!concourse-team))
        config_file: geode-metrics-pipeline/ci/pipelines/metrics.yml
{% endif %}

- name: set-reaper-pipeline
  serial: true
  public: ((!public-pipelines))
  plan:
  - get: geode-reaper-pipeline
    trigger: true
  - task: pipeline-vars
    config:
      outputs:
      - name: pipeline-vars
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: /bin/sh
        args:
          - -c
          - |
            cat <<EOF >>pipeline-vars/vars
            ---
            pipeline-prefix: "((!pipeline-prefix))"
            docker-image-prefix: "((!pipeline-prefix))"
  - put: apachegeode-concourse
    params:
      pipelines:
      - name: ((!pipeline-prefix))reaper
        team: ((!concourse-team))
        config_file: geode-reaper-pipeline/ci/pipelines/reaper.yml
        vars_files:
        - pipeline-vars/vars

- name: build-meta-mini-docker-image
  public: ((!public-pipelines))
  serial: true
  plan:
  - aggregate:
    - get: meta-mini-dockerfile
      trigger: true
  - put: meta-mini-image
    params:
      build: meta-mini-dockerfile/ci/images/meta-mini
      tag_as_latest: true
