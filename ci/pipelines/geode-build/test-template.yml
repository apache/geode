# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
jobs:
- name: (( grab metadata.job.name ))
  serial: true
  public: true
  plan:
    - aggregate:
      - get: geode
        passed: [Build]
        trigger: true
      - get: geode-ci
      - get: geode-build-version
        passed: [Build]
      - get: docker-geode-build-image
        params:
          rootfs: true
    - task: runtests
      image: docker-geode-build-image
      tags: (( grab metadata.job.size ))
      privileged: true
      timeout: (( grab metadata.job.timeout ))
      config:
        inputs:
          - name: geode
          - name: geode-ci
          - name: docker-geode-build-image
          - name: geode-build-version
        platform: linux
        outputs:
          - name: built-geode
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
          PARALLEL_DUNIT: (( grab metadata.job.dunit.parallel ))
          DUNIT_PARALLEL_FORKS: (( grab metadata.job.dunit.forks ))
          CALL_STACK_TIMEOUT: (( grab metadata.job.call_stack_timeout ))
        run:
          args:
          - (( grab metadata.job.gradle_task ))
          - (( grab metadata.job.artifact_slug ))
          path: geode-ci/ci/scripts/test-run.sh
      on_failure:
        aggregate:
          - put: send-notification-email
            params:
              subject: built-geode/subject
              body: built-geode/body
      ensure:
        aggregate:
        - task: archive-results
          image: docker-geode-build-image
          config:
            inputs:
              - name: geode
              - name: geode-ci
              - name: geode-build-version
              - name: built-geode
            platform: linux
            params:
              MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
              SERVICE_ACCOUNT: ((!concourse-gcp-account))
              PUBLIC_BUCKET: ((!public-bucket))
            run:
              args:
              - (( grab metadata.job.gradle_task ))
              - (( grab metadata.job.artifact_slug ))
              path: geode-ci/ci/scripts/test-archive.sh
