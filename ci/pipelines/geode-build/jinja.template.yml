{% macro alpine_tools_config() %}
config:
  platform: linux
  image_resource:
    type: docker-image
    source:
      password: ((!docker-password))
      repository: gcr.io/apachegeode-ci/{{repository.fork}}-{{repository.branch}}-alpine-tools
      tag: latest
      username: ((!docker-username))
{% endmacro %}

{% macro plan_resource_gets() %}
- get: geode-ci
- aggregate:
  - get: geode
    passed:
    - Build
  - get: geode-build-version
    passed:
    - Build
    trigger: true
{% endmacro %}

groups:
- name: main
  jobs:
  - Build
  - DistributedTest
{% for p in platforms %}
  - {{p.prefix}}AcceptanceTest
  - {{p.prefix}}IntegrationTest
{% endfor %}
  - WindowsUnitTest
  - WindowsGfshDistributedTest
  - UpgradeTest
  - UpdatePassingRef
resources:
- name: geode-build-artifact
  type: gcs-resource
  source:
    bucket: ((!public-bucket))
    json_key: ((!concourse-gcp-key))
    regexp: artifacts/jinja/geodefiles-(.*).tgz
- name: send-notification-email
  type: email
  source:
    from: ((!source-email-address))
    smtp:
      host: ((!source-email-server))
      password: ((!source-email-password))
      port: "587"
      username: ((!source-email-username))
    to:
    - ((!notification-email-address))
- name: concourse-metadata-resource
  type: concourse-metadata-resource
  source: {}
- name: docker-geode-build-image
  type: docker-image
  source:
    password: ((!docker-password))
    repository: gcr.io/apachegeode-ci/{{repository.fork}}-{{repository.branch}}-((!docker-image-name))
    tag: latest
    username: ((!docker-username))
- name: geode
  type: git
  source:
    branch: {{repository.branch}}
    depth: 1
    ignore_paths:
    - ci/*
    uri: https://github.com/{{repository.fork}}/{{repository.project}}.git
- name: geode-ci
  type: git
  source:
    branch: {{repository.branch}}
    depth: 1
    paths:
    - ci/pipelines/geode-build/*
    - ci/scripts/*
    uri: https://github.com/{{repository.fork}}/{{repository.project}}.git
- name: geode-build-version
  type: semver
  source:
    bucket: ((!concourse-bucket))
    driver: gcs
    initial_version: 1.3.0
    json_key: ((!concourse-gcp-key))
    key: {{repository.branch}}/version
resource_types:
- name: concourse-metadata-resource
  type: docker-image
  source:
    password: ((!docker-password))
    repository: gcr.io/apachegeode-ci/{{repository.fork}}-{{repository.branch}}-concourse-metadata-resource
    tag: latest
    username: ((!docker-username))
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource
jobs:
- name: Build
  public: true
  serial: true
  plan:
  - get: geode
    trigger: true
  - get: geode-ci
  - get: geode-build-version
    params:
      pre: build
  - task: build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((!docker-password))
          repository: gcr.io/apachegeode-ci/{{repository.fork}}-{{repository.branch}}-((!docker-image-name))
          tag: latest
          username: ((!docker-username))
      params:
        MAINTENANCE_VERSION: {{repository.branch}}
        PUBLIC_BUCKET: ((!public-bucket))
        SERVICE_ACCOUNT: ((!concourse-gcp-account))
      run:
        path: geode-ci/ci/scripts/build.sh
      inputs:
      - name: geode
      - name: geode-ci
      - name: geode-build-version
      outputs:
      - name: built-geode
      - name: results
    on_failure:
      aggregate:
      - put: send-notification-email
        params:
          body: results/body
          subject: results/subject
    ensure:
      aggregate:
      - put: geode-build-artifact
        params:
          file: built-geode/geodefiles-*.tgz
      - put: geode-build-version
        params:
          file: results/number
- name: UpdatePassingRef
  public: true
  serial: true
  plan:
  - get: geode
    passed:
    - AcceptanceTest
    - DistributedTest
    - IntegrationTest
    - UpgradeTest
    trigger: true
  - get: geode-ci
  - get: docker-geode-build-image
  - task: updatepassingref
    config:
      platform: linux
      params:
        MAINTENANCE_VERSION: {{repository.branch}}
        PUBLIC_BUCKET: ((!public-bucket))
        SERVICE_ACCOUNT: ((!concourse-gcp-account))
      run:
        path: geode-ci/ci/scripts/update-passing-ref.sh
      inputs:
      - name: geode
      - name: geode-ci
      outputs:
      - name: results
    image: docker-geode-build-image
{% for test in tests %}
- name: {{test.name}}Test
  public: true
  plan:
  - do:
    {{ plan_resource_gets() |indent(4) }}
      - do:
        - put: concourse-metadata-resource
        - task: start_instance
          {{ alpine_tools_config()|indent(10) }}
            params:
              CPUS: {{test.CPUS}}
              GEODE_BRANCH: {{repository.branch}}
              GEODE_FORK: {{repository.fork}}
              RAM: {{test.RAM}}
            run:
              path: geode-ci/ci/scripts/start_instance.sh
            inputs:
            - name: concourse-metadata-resource
            - name: geode-ci
            outputs:
            - name: instance-data
          timeout: 15m
          attempts: 100
    - task: rsync_code_up
      {{ alpine_tools_config()|indent(6) }}
        run:
          path: geode-ci/ci/scripts/rsync_code_up.sh
        inputs:
        - name: geode-ci
        - name: geode
        - name: instance-data
      timeout: 5m
    - task: execute_tests
      {{ alpine_tools_config()|indent(6) }}
        params:
          ARTIFACT_SLUG: {{test.ARTIFACT_SLUG}}
          CALL_STACK_TIMEOUT: {{test.CALL_STACK_TIMEOUT}}
          DUNIT_PARALLEL_FORKS: {{test.DUNIT_PARALLEL_FORKS}}
          GRADLE_TASK: {{test.GRADLE_TASK}}
          GRADLE_TASK_OPTIONS: ""
          MAINTENANCE_VERSION: {{repository.branch}}
          PARALLEL_DUNIT: "true"
          PUBLIC_BUCKET: ((!public-bucket))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
        run:
          path: geode-ci/ci/scripts/execute_tests.sh
        inputs:
        - name: geode-ci
        - name: geode
        - name: instance-data
      timeout: {{test.execute_test_timeout}}
    ensure:
      do:
      - task: rsync_code_down
        {{ alpine_tools_config()|indent(8) }}
          run:
            path: geode-ci/ci/scripts/rsync_code_down.sh
          inputs:
          - name: geode-ci
          - name: instance-data
          outputs:
          - name: geode-results
        timeout: 5m
      ensure:
        do:
        - aggregate:
          - task: archive_results
            {{ alpine_tools_config()|indent(12) }}
              params:
                ARTIFACT_SLUG: {{test.ARTIFACT_SLUG}}
                GRADLE_TASK: {{test.GRADLE_TASK}}
                MAINTENANCE_VERSION: {{repository.branch}}
                PUBLIC_BUCKET: ((!public-bucket))
                SERVICE_ACCOUNT: ((!concourse-gcp-account))
              run:
                path: geode-ci/ci/scripts/archive_results.sh
              inputs:
              - name: concourse-metadata-resource
              - name: geode-ci
              - name: geode-build-version
              - name: geode-results
            timeout: 1h
          - task: stop_instance
            {{ alpine_tools_config()|indent(12) }}
              run:
                path: geode-ci/ci/scripts/stop_instance.sh
              inputs:
              - name: geode-ci
              - name: instance-data
            timeout: 1h
{% endfor %}
{% for test in windowstests %}
- name: {{test.name}}Test
  public: true
  plan:
  {{ plan_resource_gets() |indent(2) }}
  - task: cleanup-java-processes
    config:
      platform: windows
      run:
        path: powershell
        args:
        - -command
        - |
          gwmi win32_process -filter 'name = "java.exe"' | select commandline | format-list
          kill -name java -force
          exit 0
    tags:
    - windows-{{test.tags}}-tests
  - task: execute_tests
    config:
      platform: windows
      params:
        CALL_STACK_TIMEOUT: "1800"
        DUNIT_PARALLEL_FORKS: "0"
        JAVA_HOME: C:\progra~1\java\jdk1.8.0_181
        MAINTENANCE_VERSION: {{repository.branch}}
        PARALLEL_DUNIT: "false"
        PUBLIC_BUCKET: ((!public-bucket))
        SERVICE_ACCOUNT: ((!concourse-gcp-account))
      run:
        path: bash
        args:
        - geode-ci/ci/scripts/windows/test-run.sh
        - {{test.target_arg}}
        - {{test.dir_arg}}
        - {{test.package_arg}}
      inputs:
      - name: geode-ci
      - name: geode
      outputs:
      - name: built-geode
    tags:
    - windows-{{test.tags}}-tests
    ensure:
      aggregate:
      - task: archive_results
        config:
          platform: windows
          params:
            MAINTENANCE_VERSION: {{repository.branch}}
            PUBLIC_BUCKET: ((!public-bucket))
            SERVICE_ACCOUNT: ((!concourse-gcp-account))
          run:
            path: bash
            args:
            - geode-ci/ci/scripts/windows/test-archive.sh
            - {{test.target_arg}}
            - {{test.dir_arg}}
          inputs:
          - name: geode-ci
          - name: geode-build-version
          - name: built-geode
        tags:
        - windows-{{test.tags}}-tests
        timeout: 1h
    timeout: 4h
{% endfor %}