# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
jobs:
- name: (( grab metadata.job.name ))
  serial: false
  public: true
  plan:
  - do:
    - aggregate:
      - put: concourse-metadata-resource
      - get: geode
        trigger: true
        version: every
        params:
          fetch_merge: true
          git:
            depth: 100
      - get: alpine-tools-image
        params:
          rootfs: true
    # Unmerged pull request SHA, for writing status into GitHub
    - get: geode-unmerged-request
      resource: geode
      version: every
      params:
        fetch_merge: false
    - aggregate:
      - put: geode
        params:
          path: geode-unmerged-request
          context: $BUILD_JOB_NAME
          status: pending

    - task: start_instance
      image: alpine-tools-image
      timeout: 5m
      config:
        inputs:
          - name: concourse-metadata-resource
          - name: geode
        outputs:
          - name: instance-data
        platform: linux
        params:
          CPUS: (( grab metadata.job.cpus ))
          RAM: (( grab metadata.job.ram ))
          GEODE_BRANCH: (( grab metadata.geode-build-branch ))
          GEODE_FORK: (( grab metadata.geode-fork ))
        run:
          path: geode/ci/scripts/start_instance.sh
    - task: rsync_code_up
      image: alpine-tools-image
      timeout: 5m
      config:
        inputs:
          - name: geode
          - name: instance-data
        platform: linux
        run:
          path: geode/ci/scripts/rsync_code_up.sh
    - task: prepopulate_build
      image: alpine-tools-image
      config:
        inputs:
          - name: geode
          - name: instance-data
        platform: linux
        run:
          path: geode/ci/scripts/prepopulate_build.sh
    - task: execute_tests
      image: alpine-tools-image
      timeout: (( grab metadata.job.timeout ))
      tags: [pr]
      config:
        inputs:
          - name: geode
          - name: instance-data
        platform: linux
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
          PARALLEL_DUNIT: (( grab metadata.job.dunit.parallel ))
          DUNIT_PARALLEL_FORKS: (( grab metadata.job.dunit.forks ))
          CALL_STACK_TIMEOUT: (( grab metadata.job.call_stack_timeout ))
          GRADLE_TASK: (( grab metadata.job.gradle_task ))
          GRADLE_TASK_OPTIONS: (( grab metadata.job.gradle_task_options || "" ))
          ARTIFACT_SLUG: (( grab metadata.job.artifact_slug ))
        run:
          path: geode/ci/scripts/execute_tests.sh
    ensure:
      do:
      - task: rsync_code_down
        image: alpine-tools-image
        timeout: 5m
        config:
          inputs:
            - name: geode
            - name: instance-data
          outputs:
            - name: geode-results
          platform: linux
          run:
            path: geode/ci/scripts/rsync_code_down.sh
      ensure:
        aggregate:
        - task: archive-results
          image: alpine-tools-image
          config:
            inputs:
              - name: concourse-metadata-resource
              - name: geode
              - name: geode-results
            platform: linux
            params:
              MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
              SERVICE_ACCOUNT: ((!concourse-gcp-account))
              PUBLIC_BUCKET: ((!public-bucket))
              GRADLE_TASK: (( grab metadata.job.gradle_task ))
              ARTIFACT_SLUG: (( grab metadata.job.artifact_slug ))
            run:
              path: geode/ci/scripts/archive_results.sh
        - task: stop_instance
          image: alpine-tools-image
          timeout: 1h
          config:
            inputs:
              - name: geode
              - name: instance-data
            platform: linux
            run:
              path: geode/ci/scripts/stop_instance.sh
    on_failure:
      aggregate:
      - put: geode
        params:
          path: geode-unmerged-request
          status: failure
          context: $BUILD_JOB_NAME
    on_success:
      aggregate:
      - put: geode
        params:
          path: geode-unmerged-request
          context: $BUILD_JOB_NAME
          status: success

