# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

image_resource: &alpine-tools-image
  type: docker-image
  source:
    username: ((!docker-username))
    password: ((!docker-password))
    repository: gcr.io/apachegeode-ci/((!docker-image-prefix))alpine-tools
    tag: latest

jobs:
- name: (( grab metadata.job.name ))
  serial: false
  public: true
  plan:
  - do:
    # Merged pull request SHA, for building
    - get: geode
      trigger: true
      version: every
      params:
        fetch_merge: true
        git:
          depth: 100
    - aggregate:
      # Unmerged pull request SHA, for writing status into GitHub
      - do:
        - get: geode-unmerged-request
          resource: geode
          version: every
          params:
            fetch_merge: false
        - put: pull-request-job-pending
          resource: geode
          params:
            path: geode-unmerged-request
            context: $BUILD_JOB_NAME
            status: pending
      # Start heavy lifter instance
      - do:
        - put: concourse-metadata-resource
        - task: start_instance
          timeout: 15m
          attempts: 100
          config:
            inputs:
            - name: concourse-metadata-resource
            - name: geode
            outputs:
            - name: instance-data
            platform: linux
            image_resource: *alpine-tools-image
            params:
              CPUS: (( grab metadata.job.cpus ))
              RAM: (( grab metadata.job.ram ))
              GEODE_BRANCH: (( grab metadata.geode-build-branch ))
              GEODE_FORK: (( grab metadata.geode-fork ))
            run:
              path: geode/ci/scripts/start_instance.sh
    - task: rsync_code_up
      timeout: 5m
      config:
        inputs:
          - name: geode
          - name: instance-data
        platform: linux
        image_resource: *alpine-tools-image
        run:
          path: geode/ci/scripts/rsync_code_up.sh
    - task: execute_tests
      timeout: (( grab metadata.job.timeout ))
      config:
        inputs:
          - name: geode
          - name: instance-data
        platform: linux
        image_resource: *alpine-tools-image
        params:
          MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
          SERVICE_ACCOUNT: ((!concourse-gcp-account))
          PUBLIC_BUCKET: ((!public-bucket))
          PARALLEL_DUNIT: (( grab metadata.job.dunit.parallel ))
          DUNIT_PARALLEL_FORKS: (( grab metadata.job.dunit.forks ))
          CALL_STACK_TIMEOUT: (( grab metadata.job.call_stack_timeout ))
          GRADLE_TASK: (( grab metadata.job.gradle_task ))
          GRADLE_TASK_OPTIONS: (( grab metadata.job.gradle_task_options || "" ))
          ARTIFACT_SLUG: (( grab metadata.job.artifact_slug ))
        run:
          path: geode/ci/scripts/execute_tests.sh
    on_success:
      do:
      - put: pull-request-job-success
        resource: geode
        params:
          path: geode-unmerged-request
          context: $BUILD_JOB_NAME
          status: success
    on_failure:
      do:
      - put: pull-request-job-failure
        resource: geode
        params:
          path: geode-unmerged-request
          status: failure
          context: $BUILD_JOB_NAME
    ensure:
      do:
      - task: rsync_code_down
        timeout: 5m
        config:
          inputs:
          - name: geode
          - name: instance-data
          outputs:
          - name: geode-results
          platform: linux
          image_resource: *alpine-tools-image
          run:
            path: geode/ci/scripts/rsync_code_down.sh
      ensure:
        aggregate:
        - task: archive-results
          config:
            inputs:
            - name: concourse-metadata-resource
            - name: geode
            - name: geode-results
            platform: linux
            image_resource: *alpine-tools-image
            params:
              MAINTENANCE_VERSION: (( grab metadata.geode-build-branch ))
              SERVICE_ACCOUNT: ((!concourse-gcp-account))
              PUBLIC_BUCKET: ((!public-bucket))
              GRADLE_TASK: (( grab metadata.job.gradle_task ))
              ARTIFACT_SLUG: (( grab metadata.job.artifact_slug ))
            run:
              path: geode/ci/scripts/archive_results.sh
        - task: stop_instance
          timeout: 1h
          config:
            inputs:
            - name: geode
            - name: instance-data
            platform: linux
            image_resource: *alpine-tools-image
            run:
              path: geode/ci/scripts/stop_instance.sh

