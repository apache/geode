/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

project.ext.installs = new Properties();

dependencies {
  compile project(path: ':geode-core', configuration: 'runtime')
  compile project(':geode-json')

  compile 'com.jayway.jsonpath:json-path:' + project.'json-path.version'
  compile 'org.apache.logging.log4j:log4j-api:' + project.'log4j.version'
  compile 'org.apache.logging.log4j:log4j-core:' + project.'log4j.version'
  compile 'commons-io:commons-io:' + project.'commons-io.version'
  compile 'commons-lang:commons-lang:' + project.'commons-lang.version'
  compile ('org.springframework.shell:spring-shell:' + project.'spring-shell.version') {
    exclude module: 'aopalliance'
    exclude module: 'asm'
    exclude module: 'cglib'
    exclude module: 'guava'
    exclude module: 'spring-aop'
    exclude module: 'spring-context-support'
    ext.optional = true
  }
  compile 'com.google.guava:guava:' + project.'guava.version'
  compile ('com.github.stefanbirkner:system-rules:' + project.'system-rules.version') {
    exclude module: 'junit-dep'
  }

  compile 'org.assertj:assertj-core:' + project.'assertj-core.version'
  compile 'org.mockito:mockito-core:' + project.'mockito-core.version'
  compile 'org.awaitility:awaitility:' + project.'awaitility.version'

  compile 'eu.codearte.catch-exception:catch-exception:' + project.'catch-exception.version'
  compile 'eu.codearte.catch-exception:catch-throwable:' + project.'catch-throwable.version'

  compile('junit:junit:' + project.'junit.version') {
    exclude module: 'hamcrest-core'
  }
}

def addOldVersion(def source, def geodeVersion, def downloadInstall) {
    sourceSets.create(source, {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    })

    dependencies.add "${source}Compile", "org.apache.geode:geode-common:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-core:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-lucene:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-old-client-support:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-wan:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-cq:$geodeVersion"
    dependencies.add "${source}Compile", "org.apache.geode:geode-rebalancer:$geodeVersion"

    if (downloadInstall) {
        configurations.create("${source}OldInstall")

        dependencies.add "${source}OldInstall", "org.apache.geode:apache-geode:$geodeVersion"

        project.ext.installs.setProperty(source, "$buildDir/apache-geode-${geodeVersion}")
        task "downloadAndUnzipFile${geodeVersion}"(type: Copy) {
            from zipTree(configurations["${source}OldInstall"].singleFile)
            into buildDir
        }

        createGeodeClasspathsFile.dependsOn tasks["downloadAndUnzipFile${geodeVersion}"]
    }
}


def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: 'createGeodeClasspathsFile')
    }
}

task createGeodeClasspathsFile  {
    File classpathsFile = file("$generatedResources/geodeOldVersionClasspaths.txt")
    File installsFile = file("$generatedResources/geodeOldVersionInstalls.txt")
    outputs.file(classpathsFile)
    outputs.file(installsFile)

    doLast {
        Properties versions = new Properties();
        project.sourceSets.each {
            versions.setProperty(it.name,it.runtimeClasspath.getAsPath())
        }

        classpathsFile.getParentFile().mkdirs();

        new FileOutputStream(classpathsFile).withStream { fos ->
            versions.store(fos, '')
        }

        installsFile.getParentFile().mkdirs();

        new FileOutputStream(installsFile).withStream { fos ->
            project.ext.installs.store(fos, '')
        }
    }

    // Add sourceSets for backwards compatibility, rolling upgrade, and
    // pdx testing.
    addOldVersion('test100', '1.0.0-incubating', false)
    addOldVersion('test110', '1.1.0', false)
    addOldVersion('test111', '1.1.1', false)
    addOldVersion('test120', '1.2.0', true)
    addOldVersion('test130', '1.3.0', true)
    addOldVersion('test140', '1.4.0', true)
    addOldVersion('test150', '1.5.0', true)
    addOldVersion('test160', '1.6.0', true)
}
