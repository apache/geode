/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'standard-subproject-configuration'
  id 'geode-publish-java'
  id 'warnings'
  id 'jmh'
  id 'nebula.facet'
  id 'distribution'
}

facets {
  commonTest {
    testTaskName = 'commonTest'
    includeInCheckLifecycle = false
  }
}
commonTest {
  useJUnitPlatform()
}

configurations {
  //The provided configuration is for declaring dependencies
  //That are required at compile and test runtime, but should not
  //be part of the zip file (because they are part of geode distribution)
  provided
  testImplementation.extendsFrom(provided);
  compileOnly.extendsFrom(provided);
}

dependencies {
  api(platform(project(':boms:geode-all-bom')))
  provided(project(':geode-serialization'))
  provided(project(':geode-logging'))
  provided(project(':geode-core'))
  provided(project(':geode-gfsh'))
  provided(project(':geode-membership'))
  provided('it.unimi.dsi:fastutil')
  provided('org.apache.logging.log4j:log4j-api')
  provided('commons-codec:commons-codec')
  provided('org.apache.commons:commons-lang3')
  implementation('io.netty:netty-handler') {
    exclude module: 'netty-tcnative-classes'
  }

  testImplementation(project(':geode-junit'))
  testImplementation('org.mockito:mockito-core')
  testImplementation('redis.clients:jedis')
  testImplementation('com.pholser:junit-quickcheck-core')
  testImplementation('com.pholser:junit-quickcheck-generators')
  testImplementation('pl.pragmatists:JUnitParams')

  commonTestImplementation('io.netty:netty-codec-redis')
  commonTestImplementation(project(':geode-junit'))
  commonTestImplementation(project(':geode-dunit'))
  commonTestImplementation('org.testcontainers:testcontainers')
  commonTestImplementation('redis.clients:jedis')
  commonTestImplementation('org.apache.logging.log4j:log4j-core')

  integrationTestImplementation(project(':geode-dunit'))
  integrationTestImplementation(project(':geode-junit'))
  integrationTestImplementation(sourceSets.commonTest.output)
  integrationTestImplementation('redis.clients:jedis')
  integrationTestImplementation('io.lettuce:lettuce-core')
  integrationTestImplementation('org.apache.logging.log4j:log4j-core')
  // This only exists for debugging PubSubNativeRedisAcceptanceTest
  integrationTestImplementation('org.buildobjects:jproc')
  integrationTestImplementation('pl.pragmatists:JUnitParams')
  integrationTestRuntimeOnly(project(':geode-log4j'))
  integrationTestRuntimeOnly('org.testcontainers:testcontainers')

  acceptanceTestImplementation(sourceSets.integrationTest.output)
  acceptanceTestImplementation(sourceSets.distributedTest.output)
  acceptanceTestImplementation(sourceSets.commonTest.output)
  acceptanceTestImplementation(project(':geode-dunit'))
  acceptanceTestImplementation(project(':geode-junit'))
  acceptanceTestImplementation('redis.clients:jedis')
  acceptanceTestImplementation('org.testcontainers:testcontainers')
  acceptanceTestRuntimeOnly('io.netty:netty-codec-redis')
  acceptanceTestRuntimeOnly(project(':geode-log4j'))
  acceptanceTestImplementation('org.springframework.boot:spring-boot-starter-web') {
    exclude module: 'spring-boot-starter-logging'
    exclude module: 'spring-boot-starter-tomcat'
  }
  acceptanceTestImplementation('org.springframework.session:spring-session-data-redis')
  acceptanceTestImplementation('org.apache.logging.log4j:log4j-core')
  // This only exists for debugging PubSubNativeRedisAcceptanceTest
  acceptanceTestImplementation('org.buildobjects:jproc')
  acceptanceTestImplementation('io.github.resilience4j:resilience4j-retry')
  acceptanceTestImplementation('io.lettuce:lettuce-core')
  acceptanceTestRuntimeOnly('io.lettuce:lettuce-core')

  distributedTestRuntimeOnly('io.netty:netty-codec-redis')
  distributedTestCompileOnly(platform(project(':boms:geode-all-bom')))
  distributedTestCompileOnly('javax.servlet:javax.servlet-api')
  distributedTestImplementation('org.apache.logging.log4j:log4j-core')
  distributedTestImplementation(project(':geode-dunit'))
  distributedTestImplementation(sourceSets.commonTest.output)
  distributedTestImplementation('redis.clients:jedis')
  distributedTestImplementation('io.lettuce:lettuce-core')
  distributedTestImplementation('io.github.resilience4j:resilience4j-retry')
  distributedTestImplementation('org.springframework.boot:spring-boot-starter-web') {
    exclude module: 'spring-boot-starter-logging'
    exclude module: 'spring-boot-starter-tomcat'
  }
  distributedTestImplementation('org.springframework.session:spring-session-data-redis')
  distributedTestImplementation('org.testcontainers:testcontainers')
}

acceptanceTest {
  environment 'GEODE_HOME', "$buildDir/../../geode-assembly/build/install/apache-geode"
  environment 'GEODE_FOR_REDIS_HOME', "$buildDir/install/geode-for-redis"
  dependsOn(':geode-assembly:installDist')
  dependsOn(':geode-for-redis:installDist')
}

distributedTest {
  environment 'GEODE_HOME', "$buildDir/../../geode-assembly/build/install/apache-geode"
  environment 'GEODE_FOR_REDIS_HOME', "$buildDir/install/geode-for-redis"
  dependsOn(':geode-assembly:installDist')
  dependsOn(':geode-for-redis:installDist')
}

repeatDistributedTest {
  environment 'GEODE_HOME', "$buildDir/../../geode-assembly/build/install/apache-geode"
  environment 'GEODE_FOR_REDIS_HOME', "$buildDir/install/geode-for-redis"
  dependsOn(':geode-assembly:installDist')
  dependsOn(':geode-for-redis:installDist')
}

tasks.register("redisAPITest") {
  dependsOn ':geode-assembly:installDist'
  dependsOn ':geode-for-redis:installDist'
  doLast {
    exec {
      executable "../ci/scripts/execute_redis_tests.sh"
    }
  }
}

distributions {
  main {
    contents {
      into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
      }
    }
  }
}
